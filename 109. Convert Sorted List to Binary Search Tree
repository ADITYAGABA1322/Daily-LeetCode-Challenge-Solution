109. Convert Sorted List to Binary Search Tree


Medium




11 March 2023



C++:




// Time Complexity : O(n) where n is the number of nodes in the linked list and space complexity is O(logn)





class Solution {
public:
    ListNode* head;  // pointer to store the head of the linked list
    TreeNode* sortedListToBST(ListNode* head) {
        if(head == NULL){  // if the head is null
            retur NULL;  // return null
        }
        this->head = head;  // update the head of the linked list
        int n = 0;  // variable to store the number of nodes in the linked list
        ListNode* curr = head;  // pointer to store the current node
        while(curr != NULL){  // iterate through the linked list
            n++;  // update the count
            curr = curr->next;  // update the current node
        }
        return helper(0, n - 1);  // return the result
    }
    TreeNode* helper(int start, int end){  // function to create the tree
        if(start > end){  // if the start is greater than the end
            return NULL;  // return null
        }
        int mid = start + (end - start) / 2;  // variable to store the mid
        TreeNode* left = helper(start, mid - 1);  // variable to store the left node
        TreeNode* root = new TreeNode(head->val);  // variable to store the root node
        root->left = left;  // update the left node
        head = head->next;  // update the head of the linked list
        root->right = helper(mid + 1, end);  // update the right node
        return root;  // return the root node
    }
};





Java:
