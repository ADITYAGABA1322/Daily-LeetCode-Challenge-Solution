# Daily-LeetCode-Challenge-Solution

11 Jan 2023

Medium 

C++:

class Solution{
    public:
    bool dfs(int node , vector<vector<int>>& g , vector<bool>& vis , int destination){
        if(node == destination) return true;
        vis[node] = true;
        for(auto child : g[node]){
            if(!vis[child]){
                if(dfs(child,g,vis,destination)) return true;
            }
        }
        return false;
    }
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination){
          vector<vector<int>> g(n);
        for(auto edge:edges){
            g[edge[0]].push_back(edge[1]);
            g[edge[1]].push_back(edge[0]);
        }
        vector<bool> vis(n,false);
        return dfs(source , g ,vis , destination);

    }

};



Java:

class Solution{
    public boolean dfs(int node , List<List<Integer>> g , boolean[] vis , int destination){
        if(node == destination) return true;
        vis[node]  = true;
        for(int child: g.get(node)){
            if(!vis[child]){
                if(dfs(child , g , vis, destination)) return true;;
            }
        }
            return false;
        }
    public boolean validPath(int n , int[][]edges , int source , int destination){
        List<List<Integer>> g = new ArrayList<>();
        for(int i=0; i<n; i++) g.add(new ArrayList<>());
        for(int[] edge:edges){
            g.get(edge[0]).add(edge[1]);
            g.get(edge[1]).add(edge[0]);
        }
        boolean[] vis = new boolean[n];
        return dfs(source,g,vis,destination);
    }
}
