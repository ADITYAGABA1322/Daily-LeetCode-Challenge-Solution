# Daily-LeetCode-Challenge-Solution

787. Cheapest Flights Within K Stops

26 Jan 2023

Medium

C++:

787. Cheapest Flights Within K Stops in c++ Using BFS

// Time Complexity : O(n^2) where n is the number of flights and space complexity is O(n)

class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<vector<pair< int , int>>> g(n);
        for(auto& e : flights){
           g[e[0]].push_back({e[1], e[2]});
        }
        vector<int> dist(n , INT_MAX);
        queue<pair<int , int>> q;
        q.push({src , 0});
        int stops = 0;
        while(stops <=k && !q.empty()){
            int sz = q.size();
            while(sz--){
            auto [node,distance] = q.front();
            q.pop();
            for(auto[child , price] : g[node]){
                if(price + distance >= dist[child]) continue;
                dist[child] = price + distance;
                q.push({child, dist[child]});
            }
            }
            stops++;
        }
        return dist[dst] == INT_MAX ? -1 : dist[dst];

    }
};


Java:



787. Cheapest Flights Within K Stops in java  using BFS

// Time Complexity : O(n^2) where n is the number of flights and space complexity is O(n)

class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
        int[] dist = new int[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;
        for (int i = 0; i <= K; i++) {
            int[] temp = new int[n];
            System.arraycopy(dist, 0, temp, 0, n);
            for (int[] flight : flights) {
                int u = flight[0], v = flight[1], w = flight[2];
                if (dist[u] != Integer.MAX_VALUE) {
                    temp[v] = Math.min(temp[v], dist[u] + w);
                }
            }
            dist = temp;
        }
        return dist[dst] == Integer.MAX_VALUE ? -1 : dist[dst];
    }
}

