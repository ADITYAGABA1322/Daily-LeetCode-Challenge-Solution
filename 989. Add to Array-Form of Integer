# Daily-LeetCode-Challenge-Solution

989. Add to Array-Form of Integer


15 Feb 2023


Easy


C++:

// Time Complexity : O(n) where n is the length of the string and space complexity is O(n)


class Solution {
public:
    vector<int> addToArrayForm(vector<int>& num , int k){
        int n = num.size();   // initialize n
        vector<int> ans;   // initialize ans
        for(int i = n - 1; i >= 0; --i){   // loop for i
            ans.push_back((num[i] + k) % 10);   // ans.push_back((num[i]+k)%10)
            k = (num[i] + k) / 10;   // k=(num[i]+k)/10
        }
        while(k){   // loop for k
            ans.push_back(k % 10);   // ans.push_back(k%10)
            k /= 10;   // k/=10
        }
        reverse(ans.begin(), ans.end());   // reverse(ans.begin(),ans.end())
        return ans;   // return ans
    }
};



Java:


// Time Complexity : O(n) where n is the length of the string and space complexity is O(n)

class Solution {
    public List<Integer> addToArrayForm(int[] num, int k) {
        int n = num.length;   // initialize n
        List<Integer> ans = new ArrayList<>();   // initialize ans
        for(int i = n - 1; i >= 0; --i){   // loop for i
            ans.add((num[i] + k) % 10);   // ans.add((num[i]+k)%10)
            k = (num[i] + k) / 10;   // k=(num[i]+k)/10
        }
        while(k > 0){   // loop for k
            ans.add(k % 10);   // ans.add(k%10)
            k /= 10;   // k/=10
        }
        Collections.reverse(ans);   // Collections.reverse(ans)
        return ans;   // return ans
    }
}







