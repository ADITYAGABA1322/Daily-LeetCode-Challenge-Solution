# Daily-LeetCode-Challenge-Solution

926. Flip String to Monotone Increasing

Medium

17 Jan 2023

C++ :

 Approaches

// Time Complexity : O(n) where n is the length of the string and space complexity is O(1)

1st Approach. using DP

class Solution {
public:
    int minFlipsMonoIncr(string s) {        //  function to find the minimum number of flips to make the string monotone increasing
        int ans = 0 ,num = 0; // ans is the minimum number of flips to make the string monotone increasing and num is the number of 1's in the string
        for(char c:s){    // for each character in the string
            if(c == '0'){    // if the character is 0 
                ans = min(num , ans+1); // ans is the minimum of the number of 1's in the string and the number of flips to make the string monotone increasing
            }
            else{
                num++;      // increment the number of 1's in the string by 1
            }
        }
        return ans;

        
    }
};

2nd Approach

class Solution {
public:
    int minFlipsMonoIncr(string s) {    //  function to find the minimum number of flips to make the string monotone increasing
        int m = 0;    // m is the number of 0's in the string
        for(char c : s){   // for each character in the string
            if(c == '0'){       // if the character is 0
                m++;        // increment the number of 0's in the string by 1
            }
        }
        int ans  = m;       // ans is the minimum number of flips to make the string monotone increasing
        for(char c:s){          // for each character in the string
            if(c == '0'){           // if the character is 0
                ans = min(ans , --m);   // ans is the minimum of the number of 0's in the string and the number of flips to make the string monotone increasing
            }   
            else{       // if the character is 1
                m++;        // increment the number of 0's in the string by 1
            }
        }
        return ans;
    }
};




Java :

// Time Complexity : O(n) where n is the length of the string and space complexity is O(1)

1st Approach Using DP

class Solution {
    public int minFlipsMonoIncr(String s) {
       int ans = 0 , num = 0;  // ans is the minimum number of flips to make the string monotone increasing and num is the number of 1's in the string
        for(char c : s.toCharArray()){  // for each character in the string
            if(c == '0'){
                ans = Math.min(num , ans+1);  // ans is the minimum of the number of 1's in the string and the number of flips to make the string monotone increasing
            }
            else{
                num++;
            }
        }
        return ans;
    }
}

2nd Approach

class Solution {
    public int minFlipsMonoIncr(String s) {  // function to find the minimum number of flips to make the string monotone increasing
        int m= 0;
        for(int i=0; i<s.length(); i++){ // for each character in the string
            if(s.charAt(i) == '0'){  // if the character is 0
                m++;  // increment the number of 0's in the string by 1
            }
        }
        int ans = m;
        for(int i=0 ; i<s.length(); i++){       // for each character in the string
            if(s.charAt(i) == '0'){     // if the character is 0
                ans = Math.min(ans , --m);   // ans is the minimum of the number of 0's in the string and the number of flips to make the string monotone increasing
            }
            else{
                m++;        // increment the number of 0's in the string by 1
            }
        }
        return  ans;
    }
}


