# Daily-LeetCode-Challenge-Solution

1162. As Far from Land as Possible

Medium

10 Feb 2023

C++:

// Time Complexity : O(n*m) where n is the number of rows and m is the number of columns and space complexity is O(n*m)

class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        int n = grid.size();  // variable to store the number of rows
        int m = grid[0].size();  // variable to store the number of columns
        queue<pair<int, int>> q;  // queue to store the indices of the land
        for(int i=0; i<n; i++){  // for each row
            for(int j=0; j<m; j++){  // for each column
                if(grid[i][j] == 1){  // if the current cell is land
                    q.push({i, j});  // push the indices of the land into the queue
                }
            }
        }
        if(q.size() == n*m || q.empty()) return -1;  // if all the cells are land or all the cells are water
        int res = -1;  // variable to store the result
        while(!q.empty()){  // while the queue is not empty
            int size = q.size();  // variable to store the size of the queue
            for(int i=0; i<size; i++){  // for each element in the queue
                pair<int, int> p = q.front();  // variable to store the indices of the land
                q.pop();  // pop the indices of the land from the queue
                int x = p.first;  // variable to store the row index of the land
                int y = p.second;  // variable to store the column index of the land
                if(x > 0 && grid[x - 1][y] == 0){  // if the cell above the current cell is water
                    grid[x - 1][y] = 1;  // make the cell above the current cell as land
                    q.push({x - 1, y});  // push the indices of the land into the queue
                }
                if(x < n - 1 && grid[x + 1][y] == 0){  // if the cell below the current cell is water
                    grid[x + 1][y] = 1;  // make the cell below the current cell as land
                    q.push({x + 1, y});  // push the indices of the land into the queue
                }
                if(y > 0 && grid[x][y - 1] == 0){  // if the cell to the left of the current cell is water
                    grid[x][y - 1] = 1;  // make the cell to the left of the current cell as land
                    q.push({x, y - 1});  // push the indices of the land into the queue
                }
                if(y < m - 1 && grid[x][y + 1] == 0){  // if the cell to the right of the current cell is water
                    grid[x][y + 1] = 1;  // make the cell to the right of the current cell as land
                    q.push({x, y + 1});  // push the indices of the land into the queue
                }
            }
            res++;  // increment the result
        }
        return res;  // return the result
    }
};



Java:


// Time Complexity : O(n*m) where n is the number of rows and m is the number of columns and space complexity is O(n*m)

class Solution {
    public int maxDistance(int[][] grid) {
        int n = grid.length;  // variable to store the number of rows
        int m = grid[0].length;  // variable to store the number of columns
        Queue<int[]> q = new LinkedList<>();  // queue to store the indices of the land
        for(int i=0; i<n; i++){  // for each row
            for(int j=0; j<m; j++){  // for each column
                if(grid[i][j] == 1){  // if the current cell is land
                    q.add(new int[]{i, j});  // push the indices of the land into the queue
                }
            }
        }
        if(q.size() == n*m || q.isEmpty()) return -1;  // if all the cells are land or all the cells are water
        int res = -1;  // variable to store the result
        while(!q.isEmpty()){  // while the queue is not empty
            int size = q.size();  // variable to store the size of the queue
            for(int i=0; i<size; i++){  // for each element in the queue
                int[] p = q.poll();  // variable to store the indices of the land
                int x = p[0];  // variable to store the row index of the land
                int y = p[1];  // variable to store the column index of the land
                if(x > 0 && grid[x - 1][y] == 0){  // if the cell above the current cell is water
                    grid[x - 1][y] = 1;  // make the cell above the current cell as land
                    q.add(new int[]{x - 1, y});  // push the indices of the land into the queue
                }
                if(x < n - 1 && grid[x + 1][y] == 0){  // if the cell below the current cell is water
                    grid[x + 1][y] = 1;  // make the cell below the current cell as land
                    q.add(new int[]{x + 1, y});  // push the indices of the land into the queue
                }
                if(y > 0 && grid[x][y - 1] == 0){  // if the cell to the left of the current cell is water
                    grid[x][y - 1] = 1;  // make the cell to the left of the current cell as land
                    q.add(new int[]{x, y - 1});  // push the indices of the land into the queue
                }
                if(y < m - 1 && grid[x][y + 1] == 0){  // if the cell to the right of the current cell is water
                    grid[x][y + 1] = 1;  // make the cell to the right of the current cell as land
                    q.add(new int[]{x, y + 1});  // push the indices of the land into the queue
                }
            }
            res++;  // increment the result
        }
        return res;  // return the result
    }
}

