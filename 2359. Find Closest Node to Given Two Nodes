# Daily-LeetCode-Challenge-Solution

2359. Find Closest Node to Given Two Nodes

25 Jan 2023

Medium


2 Approach:
BFS || DFS

// Time Complexity : O(n) where n is the number of nodes and space complexity is O(n)

C++:
1st : By USING DFS
// Time Complexity : O(n) where n is the number of nodes and space complexity is O(n)

class Solution {
public:
    void dfs(int node, vector<int>& edges, vector<int>& dist, vector<bool>& visit) { 
        visit[node] = true; 
        int neighbor = edges[node];
        if (neighbor != -1 && !visit[neighbor]) {
            dist[neighbor] = 1 + dist[node];
            dfs(neighbor, edges, dist, visit);
        }
    }

    int closestMeetingNode(vector<int>& edges, int node1, int node2) {
        int n = edges.size();
        int ans = -1;
        int minDist = INT_MAX;
        vector<int> dist1(n, 0), dist2(n, 0);
        vector<bool> visit1(n), visit2(n);
        dist1[node1] = 0, dist2[node2] = 0;

        dfs(node1, edges, dist1, visit1);
        dfs(node2, edges, dist2, visit2);
    
          for(int currNode = 0; currNode < n; currNode++){
            if(visit1[currNode] == true && visit2[currNode] == true && minDist > max(dist1[currNode], dist2[currNode])){
                minDist = max(dist1[currNode], dist2[currNode]);
                ans = currNode;
            }
        }
        return ans;
    }
};



2nd : By USING BFS


class Solution {
public:
    void bfs(int startNode, vector<int>& edges, vector<int>& dist ,  vector<bool>& visit) {
        int n = edges.size();
        queue<int> q;
        q.push(startNode);

       
        dist[startNode] = 0;

        while (!q.empty()) {
            int node = q.front();
            q.pop();

            if (visit[node]) {
                continue;
            }

            visit[node] = true;
            int neighbor = edges[node];
            if (neighbor != -1 && !visit[neighbor]) {
                dist[neighbor] = 1 + dist[node];
                q.push(neighbor);
            }
        }
    }
        int closestMeetingNode(vector<int>& edges, int node1, int node2) {
        int n = edges.size();
        int ans = -1;
        int minDist = INT_MAX;
        vector<int> dist1(n, 0), dist2(n, 0);
        vector<bool> visit1(n), visit2(n);
        dist1[node1] = 0;
        dist2[node2] = 0;
        bfs(node1, edges, dist1, visit1);
        bfs(node2, edges, dist2, visit2);
        for(int currNode = 0; currNode<n; currNode++){
            if(visit1[currNode] ==  true && visit2[currNode] == true && minDist > max(dist1[currNode] , dist2[currNode])){
                minDist = max(dist1[currNode] , dist2[currNode]);
                ans = currNode;
            }
        }
        return ans;
    }
};



Java:



2 Approach:
BFS || DFS

// Time Complexity : O(n) where n is the number of nodes and space complexity is O(n)

1st : By USING DFS

// Time Complexity : O(n) where n is the number of nodes and space complexity is O(n)

class Solution {
    public int closestMeetingNode(int[] edges, int node1, int node2) {
        int n = edges.length;
        int ans = -1;
        int minDist = Integer.MAX_VALUE;
        int[] dist1 = new int[n];
        int[] dist2 = new int[n];
        boolean[] visit1 = new boolean[n];
        boolean[] visit2 = new boolean[n];
        dist1[node1] = 0;
        dist2[node2] = 0;
        dfs(node1, edges, dist1, visit1);
        dfs(node2, edges, dist2, visit2);
        for(int currNode = 0; currNode<n; currNode++){
            if(visit1[currNode] ==  true && visit2[currNode] == true && minDist > Math.max(dist1[currNode] , dist2[currNode])){
                minDist = Math.max(dist1[currNode] , dist2[currNode]);
                ans = currNode;
            }
        }
        return ans;
    }
    public void dfs(int node, int[] edges, int[] dist, boolean[] visit) { 
        visit[node] = true; 
        int neighbor = edges[node];
        if (neighbor != -1 && !visit[neighbor]) {
            dist[neighbor] = 1 + dist[node];
            dfs(neighbor, edges, dist, visit);
        }
    }
}



2nd : By USING BFS

// Time Complexity : O(n) where n is the number of nodes and space complexity is O(n)

class Solution {
    public int closestMeetingNode(int[] edges, int node1, int node2) {
        int n = edges.length; 
        int ans = -1;
        int minDist = Integer.MAX_VALUE;
        int[] dist1 = new int[n];
        int[] dist2 = new int[n];
        boolean[] visit1 = new boolean[n];
        boolean[] visit2 = new boolean[n];
        dist1[node1] = 0;
        dist2[node2] = 0;
        bfs(node1, edges, dist1, visit1);
        bfs(node2, edges, dist2, visit2);
        for(int currNode = 0; currNode<n; currNode++){
            if(visit1[currNode] ==  true && visit2[currNode] == true && minDist > Math.max(dist1[currNode] , dist2[currNode])){
                minDist = Math.max(dist1[currNode] , dist2[currNode]);
                ans = currNode;
            }
        }
        return ans;
    }
    public void bfs(int startNode, int[] edges, int[] dist ,  boolean[] visit) {
        int n = edges.length;
        Queue<Integer> q = new LinkedList<>();
        q.add(startNode);

       
        dist[startNode] = 0;

        while (!q.isEmpty()) {
            int node = q.poll();

            if (visit[node]) {
                continue;
            }

            visit[node] = true;
            int neighbor = edges[node];
            if (neighbor != -1 && !visit[neighbor]) {
                dist[neighbor] = 1 + dist[node];
                q.add(neighbor);
            }
        }
    }
}


