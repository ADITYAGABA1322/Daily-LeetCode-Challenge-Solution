382. Linked List Random Node



10 March 2023



Medium



C++:


// Time Complexity : O(n) where n is the number of nodes in the linked list and space complexity is O(1)





class Solution {
public:
    ListNode* head;  // pointer to store the head of the linked list
    Solution(ListNode* head) {
        this->head = head;  // update the head of the linked list
    }
    
    int getRandom() {
        ListNode* curr = head;  // pointer to store the current node
        int res = curr->val;  // variable to store the result
        int count = 1;  // variable to store the count
        while(curr != NULL){  // iterate through the linked list
            if(rand() % count == 0){  // if the random number is 0
                res = curr->val;  // update the result
            }
            count++;  // update the count
            curr = curr->next;  // update the current node
        }
        return res;  // return the result
    }
};



Java:



// Time Complexity : O(n) where n is the number of nodes in the linked list and space complexity is O(1)




class Solution {
    ListNode head;  // pointer to store the head of the linked list
    public Solution(ListNode head) {
        this.head = head;  // update the head of the linked list
    }
    
    public int getRandom() {
        ListNode curr = head;  // pointer to store the current node
        int res = curr.val;  // variable to store the result
        int count = 1;  // variable to store the count
        Random rand = new Random();  
        while(curr != null){  // iterate through the linked list
            if(rand.nextInt(count) == 0){  // if the random number is 0
                res = curr.val;  // update the result
            }
            count++;  // update the count
            curr = curr.next;  // update the current node
        }
        return res;  // return the result
    }
}

