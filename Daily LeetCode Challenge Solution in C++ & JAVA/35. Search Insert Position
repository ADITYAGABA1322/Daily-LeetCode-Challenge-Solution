35. Search Insert Position


20 Feb 2023


Easy


C++:


// Time Complexity : O(n) where n is the length of the string and space complexity is O(n)


class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int n = nums.size();   // int n=nums.size()
        int l = 0, r = n - 1;   // int l=0,r=n-1
        while(l <= r){   // loop for l and r
            int mid = l + (r - l) / 2;   // int mid=l+(r-l)/2
            if(nums[mid] == target) return mid;   // if condition is true
            else if(nums[mid] < target) l = mid + 1;   // else if condition is true
            else r = mid - 1;   // else condition is true
        }
        return l;   // return l
    }
};


Java:

// Time Complexity : O(n) where n is the length of the string and space complexity is O(n)


class Solution {
    public int searchInsert(int[] nums, int target) {
        int n = nums.length;   // int n=nums.length
        int l = 0, r = n - 1;   // int l=0,r=n-1
        while(l <= r){   // loop for l and r
            int mid = l + (r - l) / 2;   // int mid=l+(r-l)/2
            if(nums[mid] == target) return mid;   // if condition is true
            else if(nums[mid] < target) l = mid + 1;   // else if condition is true
            else r = mid - 1;   // else condition is true
        }
        return l;   // return l
    }
};

