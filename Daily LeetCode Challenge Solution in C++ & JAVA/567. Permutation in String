# Daily-LeetCode-Challenge-Solution

567. Permutation in String

4 Feb 2023

Medium

C++:

2 Solutions:


// Time Complexity : O(n) where n is the length of the string s2 and space complexity is O(1)

1st:

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        vector<int> v1(26);  // vector to store the frequency of the characters of the string s1
        vector<int> v2(26);  // vector to store the frequency of the characters of the string s2
        for(int i=0; i<s1.size(); i++){  // for each character of the string s1
            v1[s1[i] - 'a']++;  // update the frequency of the character
        }
        for(int i=0; i<s2.size(); i++){  // for each character of the string s2
            v2[s2[i] - 'a']++;  // update the frequency of the character
            if(i >= s1.size()){  // if the window size is greater than the length of the string s1
                v2[s2[i - s1.size()] - 'a']--;  // decrement the frequency of the character
            }
            if(v1 == v2){  // if the frequency of the characters of the string s1 and the string s2 are equal
                return true;  // return true
            }
        }
        return false;  // return false
    }
};

2nd:

class Solution {
public:
    bool check(int a[26] , int b[26] ){
     for(int i=0; i<26 ; i++){
         if(a[i] != b[i]){
             return 0;
         }
        
     }
         return 1;
    }
    bool checkInclusion(string s1, string s2) {
     int a[26] = {0};
     for(int i=0 ; i<s1.length() ; i++){
         int index = s1[i] - 'a';
         a[index]++;
         
          
     }
     int b[26] ={0};
    int window =  s1.length();
    int i =0;
    while(i<window && i<s2.length()){
        int index = s2[i] - 'a';
        b[index]++;
        i++;
    }
        if (check(a , b)){
            return 1;
        }
        while(i<s2.length()){
            int index = s2[i] - 'a';
            b[index]++;
            
            index = s2[i-window]-'a';
            b[index]--;
            
            i++;
            
            if (check(a , b)) return 1;
            
        }
           return 0;
    }
 

};



Java:


// Time Complexity : O(n) where n is the length of the string s2 and space complexity is O(1)

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int[] v1 = new int[26];  // vector to store the frequency of the characters of the string s1
        int[] v2 = new int[26];  // vector to store the frequency of the characters of the string s2
        for(int i=0; i<s1.length(); i++){  // for each character of the string s1
            v1[s1.charAt(i) - 'a']++;  // update the frequency of the character
        }
        for(int i=0; i<s2.length(); i++){  // for each character of the string s2
            v2[s2.charAt(i) - 'a']++;  // update the frequency of the character
            if(i >= s1.length()){  // if the window size is greater than the length of the string s1
                v2[s2.charAt(i - s1.length()) - 'a']--;  // decrement the frequency of the character
            }
            if(Arrays.equals(v1, v2)){  // if the frequency of the characters of the string s1 and the string s2 are equal
                return true;  // return true
            }
        }
        return false;  // return false
    }
};
 
