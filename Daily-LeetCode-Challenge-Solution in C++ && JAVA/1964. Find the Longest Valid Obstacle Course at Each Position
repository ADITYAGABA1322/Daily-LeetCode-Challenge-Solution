1964. Find the Longest Valid Obstacle Course at Each Position




7 May 2023




Hard




C++:


// Time Complexity : O(n log n) where n is the length of the array and space complexity is O(n)







class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        vector<int> result;  // vector to store the result
        vector<int> dp;  // vector to store the dp values
        for(int i = 0; i < obstacles.size(); i++){  // iterate through the array
            int index = upper_bound(dp.begin(), dp.end(), obstacles[i]) - dp.begin();  // find the index of the element in the dp array
            if(index == dp.size()){  // if the index is equal to the size of the dp array
                dp.push_back(obstacles[i]);  // push the element into the dp array
            }
            else{  // if the index is not equal to the size of the dp array
                dp[index] = obstacles[i];  // update the element in the dp array
            }
            result.push_back(index + 1);  // push the index + 1 into the result array
        }
        return result;  // return the result array
    }
};



Java:



// Time Complexity : O(n log n) where n is the length of the array and space complexity is O(n)







class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int[] result = new int[obstacles.length];  // array to store the result
        List<Integer> dp = new ArrayList<>();  // list to store the dp values
        for(int i = 0; i < obstacles.length; i++){  // iterate through the array
            int index = Collections.binarySearch(dp, obstacles[i]);  // find the index of the element in the dp array
            if(index < 0){  // if the index is less than 0
                index = -(index + 1);  // update the index
            }
            if(index == dp.size()){  // if the index is equal to the size of the dp array
                dp.add(obstacles[i]);  // push the element into the dp array
            }
            else{  // if the index is not equal to the size of the dp array
                dp.set(index, obstacles[i]);  // update the element in the dp array
            }
            result[i] = index + 1;  // push the index + 1 into the result array
        }
        return result;  // return the result array
    }
}








