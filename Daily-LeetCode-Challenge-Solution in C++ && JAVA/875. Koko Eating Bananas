875. Koko Eating Bananas


8 March 2023


Medium


2 Methods


C++:



// Time Complexity : O(nlogn) where n is the number of piles and space complexity is O(1)



class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        int low = 1;  // variable to store the low value
        int high = *max_element(piles.begin(), piles.end());  // variable to store the high value
        while(low < high){  // iterate until the low value is less than the high value
            int mid = low + (high - low) / 2;  // variable to store the mid value
            int hours = 0;  // variable to store the number of hours
            for(int i = 0; i < piles.size(); i++){  // iterate through the piles
                hours += (piles[i] / mid);  // calculate the number of hours
                if(piles[i] % mid != 0){  // if the current pile is not divisible by the mid value
                    hours++;  // increment the number of hours
                }
            }
            if(hours > h){  // if the number of hours is greater than the given hours
                low = mid + 1;  // increment the low value
            }
            else{  // if the number of hours is less than or equal to the given hours
                high = mid;  // decrement the high value
            }
        }
        return low;  // return the low value
    }
};


2nd Method  using bool function



// Time Complexity : O(nlogn) where n is the number of piles and space complexity is O(1)



class Solution {
public:
    bool canEatAllBananas(vector<int>& piles, int h, int k){  // function to check if the given k value is valid
        int hours = 0;  // variable to store the number of hours
        for(int i = 0; i < piles.size(); i++){  // iterate through the piles
            hours += (piles[i] / k);  // calculate the number of hours
            if(piles[i] % k != 0){  // if the current pile is not divisible by the k value
                hours++;  // increment the number of hours
            }
        }
        return hours <= h;  // return true if the number of hours is less than or equal to the given hours
    }
    int minEatingSpeed(vector<int>& piles, int h) {
        int low = 1;  // variable to store the low value
        int high = *max_element(piles.begin(), piles.end());  // variable to store the high value
        while(low < high){  // iterate until the low value is less than the high value
            int mid = low + (high - low) / 2;  // variable to store the mid value
            if(canEatAllBananas(piles, h, mid)){  // if the given mid value is valid
                high = mid;  // decrement the high value
            }
            else{  // if the given mid value is not valid
                low = mid + 1;  // increment the low value
            }
        }
        return low;  // return the low value
    }
};



                        OR 

class Solution {
public:
    bool canEatAllBananas(vector<int>& piles, int H, int K) {
        int hours = 0;
        for (int pile : piles) {
            hours += (pile - 1) / K + 1;
        }
        return hours <= H;
    }
    int minEatingSpeed(vector<int>& piles, int H) {
        int left = 1, right = *max_element(piles.begin(), piles.end());
        while (left < right) {
            int mid = (left + right) / 2;
            if (canEatAllBananas(piles, H, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
};






Java:




// Time Complexity : O(nlogm) where n is the length of the array and m is the maximum element in the array and space complexity is O(1)



class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int n = piles.length;  // variable to store the length of the array
        int low = 1;  // variable to store the minimum speed
        int high = 0;  // variable to store the maximum speed
        for(int i = 0; i < n; i++){  // iterate through the array
            high = Math.max(high, piles[i]);  // find the maximum element in the array
        }
        while(low < high){  // iterate until the low is less than high
            int mid = low + (high - low) / 2;  // variable to store the current speed
            int hours = 0;  // variable to store the number of hours
            for(int i = 0; i < n; i++){  // iterate through the array
                hours += (piles[i] / mid);  // calculate the number of hours
                if(piles[i] % mid != 0){  // if the current element is not completely divisible by the current speed
                    hours++;  // increment the number of hours
                }
            }
            if(hours > h){  // if the number of hours is greater than the given hours
                low = mid + 1;  // increment the low
            }
            else{  // if the number of hours is less than or equal to the given hours
                high = mid;  // decrement the high
            }
        }
        return low;  // return the low
    }
}





2nd Method using bool function


// Time Complexity : O(nlogn) where n is the number of piles and space complexity is O(1)


class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int low = 1, high = Arrays.stream(piles).max().getAsInt();
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (canEatAllBananas(piles, h, mid)) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
    public boolean canEatAllBananas(int[] piles, int h, int k) {
        int hours = 0;
        for (int pile : piles) {
            hours += (pile - 1) / k + 1;
        }
        return hours <= h;
    }
}


