403. Frog Jump


28 Aug 2023


Hard


C++:

// Time Complexity : O(n^2) where n is the size of the vector nums and space complexity is O(n^2)

class Solution {
public:
    bool canCross(vector<int>& stones) { // function to check whether the frog can cross the river or not
        int n=stones.size(); // variable to store the size of the stones
        unordered_map<int,unordered_set<int>>mp; // unordered_map to store the int and unordered_set
        for(auto x:stones)mp[x]; // loop for x
        mp[0].insert(0); // insert the 0
        for(auto x:stones){ // loop for x
            for(auto y:mp[x]){ // loop for y
                for(int k=y-1;k<=y+1;k++){ // loop until k is less than or equal to y+1
                    if(k>0)mp[x+k].insert(k); // if k is greater than 0 insert the k
                }
            }
        }
        return mp[stones[n-1]].size(); // return the mp[stones[n-1]].size()
    }
};

Approach 2: Dynamic Programming

// Time Complexity : O(n^2) where n is the size of the vector nums and space complexity is O(n^2)

class Solution {
public:
    bool canCross(vector<int>& stones) { // function to check whether the frog can cross the river or not
        int n=stones.size(); // variable to store the size of the stones
        vector<vector<bool>>dp(n,vector<bool>(n)); // vector to store the dp
        dp[0][1]=true; // update the dp[0][1]
        for(int i=1; i<n; i++) { // loop until i is less than n
            for(int j=0; j<i; j++) { // loop until j is less than i
                int diff=stones[i]-stones[j]; // variable to store the diff
                if(diff<n && dp[j][diff]) { // if diff is less than n and dp[j][diff] is true
                    dp[i][diff]=true; // update the dp[i][diff]
                    if(diff-1>=0)dp[i][diff-1]=true; // if diff-1 is greater than or equal to 0 update the dp[i][diff-1]
                    if(diff+1<n)dp[i][diff+1]=true; // if diff+1 is less than n update the dp[i][diff+1]
                    if(i==n-1)return true; // if i is equal to n-1 return true
                }
            }
        }
        return false; // return false
    }
};



Java:


Python:


Python3:


C:


C#:



JavaScript:


Swift:


Dart:
