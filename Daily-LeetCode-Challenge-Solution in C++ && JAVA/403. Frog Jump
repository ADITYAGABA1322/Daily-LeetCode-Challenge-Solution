403. Frog Jump


28 Aug 2023


Hard


C++:

// Time Complexity : O(n^2) where n is the size of the vector nums and space complexity is O(n^2)

class Solution {
public:
    bool canCross(vector<int>& stones) { // function to check whether the frog can cross the river or not
        int n=stones.size(); // variable to store the size of the stones
        unordered_map<int,unordered_set<int>>mp; // unordered_map to store the int and unordered_set
        for(auto x:stones)mp[x]; // loop for x
        mp[0].insert(0); // insert the 0
        for(auto x:stones){ // loop for x
            for(auto y:mp[x]){ // loop for y
                for(int k=y-1;k<=y+1;k++){ // loop until k is less than or equal to y+1
                    if(k>0)mp[x+k].insert(k); // if k is greater than 0 insert the k
                }
            }
        }
        return mp[stones[n-1]].size(); // return the mp[stones[n-1]].size()
    }
};

Approach 2: Dynamic Programming

// Time Complexity : O(n^2) where n is the size of the vector nums and space complexity is O(n^2)

class Solution {
public:
    bool canCross(vector<int>& stones) { // function to check whether the frog can cross the river or not
        int n=stones.size(); // variable to store the size of the stones
        vector<vector<bool>>dp(n,vector<bool>(n)); // vector to store the dp
        dp[0][1]=true; // update the dp[0][1]
        for(int i=1; i<n; i++) { // loop until i is less than n
            for(int j=0; j<i; j++) { // loop until j is less than i
                int diff=stones[i]-stones[j]; // variable to store the diff
                if(diff<n && dp[j][diff]) { // if diff is less than n and dp[j][diff] is true
                    dp[i][diff]=true; // update the dp[i][diff]
                    if(diff-1>=0)dp[i][diff-1]=true; // if diff-1 is greater than or equal to 0 update the dp[i][diff-1]
                    if(diff+1<n)dp[i][diff+1]=true; // if diff+1 is less than n update the dp[i][diff+1]
                    if(i==n-1)return true; // if i is equal to n-1 return true
                }
            }
        }
        return false; // return false
    }
};



Java:

// Time Complexity : O(n^2) where n is the size of the vector nums and space complexity is O(n^2)

class Solution {
    public boolean canCross(int[] stones) { // function to check whether the frog can cross the river or not
        int n=stones.length; // variable to store the size of the stones
        HashMap<Integer,HashSet<Integer>>mp=new HashMap<>(); // HashMap to store the int and HashSet
        for(int x:stones)mp.put(x,new HashSet<>()); // loop for x
        mp.get(0).add(0); // insert the 0
        for(int x:stones){ // loop for x
            for(int y:mp.get(x)){ // loop for y
                for(int k=y-1;k<=y+1;k++){ // loop until k is less than or equal to y+1
                    if(k>0)mp.get(x+k).add(k); // if k is greater than 0 insert the k
                }
            }
        }
        return mp.get(stones[n-1]).size()>0; // return the mp.get(stones[n-1]).size()>0
    }
};

Approach 2: Dynamic Programming

// Time Complexity : O(n^2) where n is the size of the vector nums and space complexity is O(n^2)

class Solution {
    public boolean canCross(int[] stones) { // function to check whether the frog can cross the river or not
        int n=stones.length; // variable to store the size of the stones
        boolean[][]dp=new boolean[n][n]; // boolean to store the dp
        dp[0][1]=true; // update the dp[0][1]
        for(int i=1; i<n; i++) { // loop until i is less than n
            for(int j=0; j<i; j++) { // loop until j is less than i
                int diff=stones[i]-stones[j]; // variable to store the diff
                if(diff<n && dp[j][diff]) { // if diff is less than n and dp[j][diff] is true
                    dp[i][diff]=true; // update the dp[i][diff]
                    if(diff-1>=0)dp[i][diff-1]=true; // if diff-1 is greater than or equal to 0 update the dp[i][diff-1]
                    if(diff+1<n)dp[i][diff+1]=true; // if diff+1 is less than n update the dp[i][diff+1]
                    if(i==n-1)return true; // if i is equal to n-1 return true
                }
            }
        }
        return false; // return false
    }
};



Python:

// Time Complexity : O(n^2) where n is the size of the vector nums and space complexity is O(n^2)

class Solution(object):
    def canCross(self, stones): # function to check whether the frog can cross the river or not
        """
        :type stones: List[int]
        :rtype: bool
        """
        n=len(stones) # variable to store the size of the stones
        mp={x:set() for x in stones} # HashMap to store the int and HashSet
        mp[0].add(0) # insert the 0
        for x in stones: # loop for x
            for y in mp[x]: # loop for y
                for k in range(y-1,y+2): # loop until k is less than or equal to y+1
                    if k > 0 and x + k in mp:  # if k is greater than 0 insert the k
                        mp[x+k].add(k) # insert the k
        return len(mp[stones[-1]]) > 0 # return the len(mp[stones[-1]]) > 0

Approach 2: Dynamic Programming

// Time Complexity : O(n^2) where n is the size of the vector nums and space complexity is O(n^2)

class Solution(object):
    def canCross(self, stones): # function to check whether the frog can cross the river or not
        """
        :type stones: List[int]
        :rtype: bool
        """
        n=len(stones) # variable to store the size of the stones
       // dp=[[False]*n for _ in range(n)]  # boolean to store the dp
        dp[0][1]=True # update the dp[0][1]
        for i in range(1,n): # loop until i is less than n
            for j in range(i): # loop until j is less than i
                diff=stones[i]-stones[j] # variable to store the diff
                if diff<n and dp[j][diff]: # if diff is less than n and dp[j][diff] is true
                    dp[i][diff]=True # update the dp[i][diff]
                    if diff-1>=0:dp[i][diff-1]=True # if diff-1 is greater than or equal to 0 update the dp[i][diff-1]
                    if diff+1<n:dp[i][diff+1]=True # if diff+1 is less than n update the dp[i][diff+1]
                    if i==n-1:return True # if i is equal to n-1 return true
        return False # return false


Python3:


// Time Complexity : O(n^2) where n is the size of the vector nums and space complexity is O(n^2)

class Solution:
    def canCross(self, stones: List[int]) -> bool: # add bracket after List
        n=len(stones) # variable to store the size of the stones
        mp={x:set() for x in stones} # HashMap to store the int and HashSet
        mp[0].add(0) # insert the 0
        for x in stones: # loop for x
            for y in mp[x]: # loop for y
                for k in range(y-1,y+2): # loop until k is less than or equal to y+1
                    if k > 0 and x + k in mp:  # if k is greater than 0 insert the k
                        mp[x+k].add(k) # insert the k
        return len(mp[stones[-1]]) > 0 # return the len(mp[stones[-1]]) > 0

Approach 2: Dynamic Programming

// Time Complexity : O(n^2) where n is the size of the vector nums and space complexity is O(n^2)

class Solution:
    def canCross(self, stones: List[int]) -> bool: # add bracket after List
        n=len(stones) # variable to store the size of the stones
        //dp=[[False]*n for _ in range(n)]  # boolean to store the dp
        dp[0][1]=True # update the dp[0][1]
        for i in range(1,n): # loop until i is less than n
            for j in range(i): # loop until j is less than i
                diff=stones[i]-stones[j] # variable to store the diff
                if diff<n and dp[j][diff]: # if diff is less than n and dp[j][diff] is true
                    dp[i][diff]=True # update the dp[i][diff]
                    if diff-1>=0:dp[i][diff-1]=True # if diff-1 is greater than or equal to 0 update the dp[i][diff-1]
                    if diff+1<n:dp[i][diff+1]=True # if diff+1 is less than n update the dp[i][diff+1]
                    if i==n-1:return True # if i is equal to n-1 return true
        return False # return false



C:

// Time Complexity : O(n^2) where n is the size of the vector nums and space complexity is O(n^2)

bool canCross(int* stones, int stonesSize){
    int n=stonesSize; // variable to store the size of the stones
    bool dp[n][n]; // boolean to store the dp
    memset(dp,false,sizeof(dp)); // memset the dp
    dp[0][1]=true; // update the dp[0][1]
    for(int i=1; i<n; i++) { // loop until i is less than n
        for(int j=0; j<i; j++) { // loop until j is less than i
            int diff=stones[i]-stones[j]; // variable to store the diff
            if(diff<n && dp[j][diff]) { // if diff is less than n and dp[j][diff] is true
                dp[i][diff]=true; // update the dp[i][diff]
                if(diff-1>=0)dp[i][diff-1]=true; // if diff-1 is greater than or equal to 0 update the dp[i][diff-1]
                if(diff+1<n)dp[i][diff+1]=true; // if diff+1 is less than n update the dp[i][diff+1]
                if(i==n-1)return true; // if i is equal to n-1 return true
            }
        }
    }
    return false; // return false
}



C#:

// Time Complexity : O(n^2) where n is the size of the vector nums and space complexity is O(n^2)

public class Solution {
    public bool CanCross(int[] stones) { // function to check whether the frog can cross the river or not
        int n=stones.Length; // variable to store the size of the stones
        Dictionary<int,HashSet<int>>mp=new Dictionary<int,HashSet<int>>(); // HashMap to store the int and HashSet
        foreach(int x in stones)mp[x]=new HashSet<int>(); // loop for x
        mp[0].Add(0); // insert the 0
        foreach(int x in stones){ // loop for x
            foreach(int y in mp[x]){ // loop for y
                for(int k=y-1;k<=y+1;k++){ // loop until k is less than or equal to y+1
                    if(k>0)mp[x+k].Add(k); // if k is greater than 0 insert the k
                }
            }
        }
        return mp[stones[n-1]].Count>0; // return the mp[stones[n-1]].Count>0
    }
}

Approach 2: Dynamic Programming

// Time Complexity : O(n^2) where n is the size of the vector nums and space complexity is O(n^2)

public class Solution {
    public bool CanCross(int[] stones) { // function to check whether the frog can cross the river or not
        int n=stones.Length; // variable to store the size of the stones
        bool[][]dp=new bool[n][]; // boolean to store the dp
        for(int i=0;i<n;i++)dp[i]=new bool[n]; // loop for i
        dp[0][1]=true; // update the dp[0][1]
        for(int i=1; i<n; i++) { // loop until i is less than n
            for(int j=0; j<i; j++) { // loop until j is less than i
                int diff=stones[i]-stones[j]; // variable to store the diff
                if(diff<n && dp[j][diff]) { // if diff is less than n and dp[j][diff] is true
                    dp[i][diff]=true; // update the dp[i][diff]
                    if(diff-1>=0)dp[i][diff-1]=true; // if diff-1 is greater than or equal to 0 update the dp[i][diff-1]
                    if(diff+1<n)dp[i][diff+1]=true; // if diff+1 is less than n update the dp[i][diff+1]
                    if(i==n-1)return true; // if i is equal to n-1 return true
                }
            }
        }
        return false; // return false
    }
}



JavaScript:

// Time Complexity : O(n^2) where n is the size of the vector nums and space complexity is O(n^2)

class Solution {
    func canCross(_ stones: [Int]) -> Bool { // function to check whether the frog can cross the river or not
        let n = stones.count // variable to store the size of the stones
        var dp = [[Bool]](repeating: [Bool](repeating: false, count: n), count: n) // boolean to store the dp
        dp[0][1] = true // update the dp[0][1]
        for i in 1..<n { // loop until i is less than n
            for j in 0..<i { // loop until j is less than i
                let diff = stones[i] - stones[j] // variable to store the diff
                if diff < n && dp[j][diff] { // if diff is less than n and dp[j][diff] is true
                    dp[i][diff] = true // update the dp[i][diff]
                    if diff - 1 >= 0 { dp[i][diff - 1] = true } // if diff-1 is greater than or equal to 0 update the dp[i][diff-1]
                    if diff + 1 < n { dp[i][diff + 1] = true } // if diff+1 is less than n update the dp[i][diff+1]
                    if i == n - 1 { return true } // if i is equal to n-1 return true
                }
            }
        }
        return false // return false
    }
}



Swift:


Dart:
