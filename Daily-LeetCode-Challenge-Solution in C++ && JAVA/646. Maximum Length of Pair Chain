646. Maximum Length of Pair Chain



27 Aug 2023



Medium


C++:

Approach 1: Iterative Dynamic Programming

// Time Complexity : O(n2) where n is the size of the vector nums and space complexity is O(n)

class Solution {
public:
    int findLongestChain(vector<vector<int>>& pairs) { // function to find the longest chain
        int n=pairs.size(); // variable to store the size of the pairs
        sort(pairs.begin(),pairs.end()); // sort the pairs
        vector<int>dp(n,1); // vector to store the dp
        for(int i=1;i<n;i++){ // loop until i is less than n
            for(int j=0;j<i;j++){ // loop until j is less than i
                if(pairs[i][0]>pairs[j][1])dp[i]=max(dp[i],dp[j]+1); // if pairs[i][0] is greater than pairs[j][1] update the dp[i]
            }
        }
        return *max_element(dp.begin(),dp.end()); // return the max element of the dp
    }
};

Approach 2: Greedy

// Time Complexity : O(nlogn) where n is the size of the vector nums and space complexity is O(1)

class Solution {
public:
    int findLongestChain(vector<vector<int>>& pairs) { // function to find the longest chain
        int n=pairs.size(); // variable to store the size of the pairs
        sort(pairs.begin(),pairs.end(),[](vector<int>&a,vector<int>&b){ // sort the pairs
            return a[1]<b[1]; // return a[1]<b[1]
        });
        int ans=0; // variable to store the ans 
        int curr=INT_MIN; // variable to store the curr
        for(auto pair : pairs){ // loop for pair
            if(curr<pair[0]){ // if curr is less than pair[0]
                ans++; // increment the ans
                curr=pair[1]; // update the curr
            }
        }
        return ans; // return the ans
    }
};




Java:

// Time Complexity : O(nlogn) where n is the size of the vector nums and space complexity is O(1)

class Solution {
    public int findLongestChain(int[][] pairs) { // function to find the longest chain
        Arrays.sort(pairs, (a, b) -> a[1] - b[1]); // sort the pairs
        int ans = 0; // variable to store the ans
        int curr = Integer.MIN_VALUE; // variable to store the curr
        for (int[] pair : pairs) { // loop for pair
            if (curr < pair[0]) { // if curr is less than pair[0]
                ans++; // increment the ans
                curr = pair[1]; // update the curr
            }
        }
        return ans; // return the ans
    }
}


Python:

// Time Complexity : O(nlogn) where n is the size of the vector nums and space complexity is O(1)

class Solution:
  def findLongestChain(self, pairs): // function to find the longest chain
        """
        :type pairs: List[List[int]]
        :rtype: int
        """
        pairs.sort(key=lambda x: x[1]) // sort the pairs
        ans = 0 // variable to store the ans
        curr = float('-inf') // variable to store the curr
        for pair in pairs: // loop for pair
            if curr < pair[0]: // if curr is less than pair[0]
                ans += 1 // increment the ans
                curr = pair[1] // update the curr
        return ans // return the ans


Python3:

// Time Complexity : O(nlogn) where n is the size of the vector nums and space complexity is O(1)

class Solution:
    def findLongestChain(self, pairs: List[List[int]]) -> int: // add bracket after List
        pairs.sort(key=lambda x: x[1]) // sort the pairs
        ans = 0 // variable to store the ans
        curr = float('-inf') // variable to store the curr
        for pair in pairs: // loop for pair
            if curr < pair[0]: // if curr is less than pair[0]
                ans += 1 // increment the ans
                curr = pair[1] // update the curr
        return ans // return the ans


C:

// Time Complexity : O(nlogn) where n is the size of the vector nums and space complexity is O(1)

int cmp(const vod *a, const void *b) { // function to compare the two elements
    int *arr1 = *(int **)a; // variable to store the arr1
    int *arr2 = *(int **)b; // variable to store the arr2
    return arr1[1] - arr2[1]; // return arr1[1] - arr2[1]
}

int findLongestChain(int** pairs, int pairsSize, int* pairsColSize){
    qsort(pairs, pairsSize, sizeof(int *), cmp); // sort the pairs
    int ans = 0; // variable to store the ans
    int curr = INT_MIN; // variable to store the curr
    for (int i = 0; i < pairsSize; i++) { // loop until i is less than pairsSize
        if (curr < pairs[i][0]) { // if curr is less than pairs[i][0]
            ans++; // increment the ans
            curr = pairs[i][1]; // update the curr
        }
    }
    return ans; // return the ans
}


C#:

// Time Complexity : O(nlogn) where n is the size of the vector nums and space complexity is O(1)

public class Solution {
    public int FindLongestChain(int[][] pairs) { // function to find the longest chain
        Array.Sort(pairs, (a, b) => a[1] - b[1]); // sort the pairs
        int ans = 0; // variable to store the ans
        int curr = int.MinValu; // variable to store the curr
        foreach (int[] pair in pairs) { // loop for pair
            if (curr < pair[0]) { // if curr is less than pair[0]
                ans++; // increment the ans
                curr = pair[1]; // update the curr
            }
        }
        return ans; // return the ans
    }
}


JavaScript:

// Time Complexity : O(nlogn) where n is the size of the vector nums and space complexity is O(1)

var findLongestChain = function(pairs) {
    pairs.sort((a, b) => a[1] - b[1]); // sort the pairs
    let ans = 0; // variable to store the ans
    let curr = -Infinity; // variable to store the curr
    for (let pair of pairs) { // loop for pair
        if (curr < pair[0]) { // if curr is less than pair[0]
            ans++; // increment the ans
            curr = pair[1]; // update the curr
        }
    }
    return ans; // return the ans
};


Swift:

// Time Complexity : O(nlogn) where n is the size of the vector nums and space complexity is O(1)

class Solution {
    func findLongestChain(_ pairs: [[Int]]) -> Int { // function to find the longest chain
        let pairs = pairs.sorted { $0[1] < $1[1] } // sort the pairs
        var ans = 0 // variable to store the ans
        var curr = Int.min // variable to store the curr
        for pair in pairs { // loop for pair
            if curr < pair[0] { // if curr is less than pair[0]
                ans += 1 // increment the ans
                curr = pair[1] // update the curr
            }
        }
        return ans // return the ans
    }
}

Dart:

// Time Complexity : O(nlogn) where n is the size of the vector nums and space complexity is O(1)

class Solution {
  int findLongestChain(List<List<int>> pairs) { // function to find the longest chain
    pairs.sort((a, b) => a[1] - b[1]); // sort the pairs
    int ans = 0; // variable to store the ans
    int curr = -1e5.toInt(); // variable to store the curr
    for (var pair in pairs) { // loop for pair
      if (curr < pair[0]) { // if curr is less than pair[0]
        ans++; // increment the ans
        curr = pair[1]; // update the curr
      }
    }
    return ans; // return the ans
  }
}


