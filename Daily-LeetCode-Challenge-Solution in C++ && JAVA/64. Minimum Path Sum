	64. Minimum Path Sum


	27 March 2023



	Medium


	C++:


	// Time Complexity : O(m * n) where m is the number of rows and n is the number of columns and space complexity is O(m * n)





	class Solution {
	public:
			int minPathSum(vector<vector<int>>& grid) {
					int m = grid.size();  // variable to store the number of rows
					int n = grid[0].size();  // variable to store the number of columns
					vector<vector<int>> dp(m, vector<int>(n));  // 2d vector to store the dp values
					dp[0][0] = grid[0][0];  // update the dp value
					for(int i = 1; i < m; i++){  // iterate through the rows
							dp[i][0] = dp[i - 1][0] + grid[i][0];  // update the dp value
					}
					for(int i = 1; i < n; i++){  // iterate through the columns
							dp[0][i] = dp[0][i - 1] + grid[0][i];  // update the dp value
					}
					for(int i = 1; i < m; i++){  // iterate through the rows
							for(int j = 1; j < n; j++){  // iterate through the columns
									dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];  // update the dp value
							}
					}
					return dp[m - 1][n - 1];  // return the dp value
			}
	};



	Java:


	// Time Complexity : O(m * n) where m is the number of rows and n is the number of columns and space complexity is O(m * n)





	class Solution {
			public int minPathSum(int[][] grid) {
					int m = grid.length;  // variable to store the number of rows
					int n = grid[0].length;  // variable to store the number of columns
					int[][] dp = new int[m][n];  // 2d array to store the dp values
					dp[0][0] = grid[0][0];  // update the dp value
					for(int i = 1; i < m; i++){  // iterate through the rows
							dp[i][0] = dp[i - 1][0] + grid[i][0];  // update the dp value
					}
					for(int i = 1; i < n; i++){  // iterate through the columns
							dp[0][i] = dp[0][i - 1] + grid[0][i];  // update the dp value
					}
					for(int i = 1; i < m; i++){  // iterate through the rows
							for(int j = 1; j < n; j++){  // iterate through the columns
									dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];  // update the dp value
							}
					}
					return dp[m - 1][n - 1];  // return the dp value
			}
	}
