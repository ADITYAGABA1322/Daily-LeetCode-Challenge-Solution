138. Copy List with Random Pointer


5 Sep 2023



Medium


C++:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(1)

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(!head) return NULL;  // if head is null return null
        Node* curr = head;  // variable to store the curr
        while(curr){  // loop until curr is null
            Node* temp = curr->next;  // variable to store the temp
            curr->next = new Node(curr->val);  // update the curr->next
            curr->next->next = temp;  // update the curr->next->next
            curr = temp;  // update the curr
        }
        curr = head;  // update the curr
        while(curr){  // loop until curr is null
            if(curr->random) curr->next->random = curr->random->next;  // if curr->random is not null update the curr->next->random
            curr = curr->next->next;  // update the curr
        }
        curr = head;  // update the curr
        Node* newHead = head->next;  // variable to store the newHead
        while(curr){  // loop until curr is null
            Node* temp = curr->next;  // variable to store the temp
            curr->next = temp->next;  // update the curr->next
            if(temp->next) temp->next = temp->next->next;  // if temp->next is not null update the temp->next
            curr = curr->next;  // update the curr
        }
        return newHead;  // return the newHead
    }
};

2nd Method 

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(n)

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(!head) return NULL;  // if head is null return null
        unordered_map<Node*, Node*> mp;  // unordered_map to store the Node* and Node*
        Node* curr = head;  // variable to store the curr
        while(curr){  // loop until curr is null
            mp[curr] = new Node(curr->val);  // update the mp[curr]
            curr = curr->next;  // update the curr
        }
        curr = head;  // update the curr
        while(curr){  // loop until curr is null
            mp[curr]->next = mp[curr->next];  // update the mp[curr]->next
            mp[curr]->random = mp[curr->random];  // update the mp[curr]->random
            curr = curr->next;  // update the curr
        }
        return mp[head];  // return the mp[head]
    }
};


Java:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(1)

class Solution {
    public Node copyRandomList(Node head) {
        if(head == null) return null;  // if head is null return null
        Node curr = head;  // variable to store the curr
        while(curr != null){  // loop until curr is null
            Node temp = curr.next;  // variable to store the temp
            curr.next = new Node(curr.val);  // update the curr->next
            curr.next.next = temp;  // update the curr->next->next
            curr = temp;  // update the curr
        }
        curr = head;  // update the curr
        while(curr != null){  // loop until curr is null
            if(curr.random != null) curr.next.random = curr.random.next;  // if curr->random is not null update the curr->next->random
            curr = curr.next.next;  // update the curr
        }
        curr = head;  // update the curr
        Node newHead = head.next;  // variable to store the newHead
        while(curr != null){  // loop until curr is null
            Node temp = curr.next;  // variable to store the temp
            curr.next = temp.next;  // update the curr->next
            if(temp.next != null) temp.next = temp.next.next;  // if temp->next is not null update the temp->next
            curr = curr.next;  // update the curr
        }
        return newHead;  // return the newHead
    }
}

2nd Method

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(n)

class Solution {
    public Node copyRandomList(Node head) {
        if(head == null) return null;  // if head is null return null
        Map<Node, Node> map = new HashMap<>();  // unordered_map to store the Node* and Node*
        Node curr = head;  // variable to store the curr
        while(curr != null){  // loop until curr is null
            map.put(curr, new Node(curr.val));  // update the mp[curr]
            curr = curr.next;  // update the curr
        }
        curr = head;  // update the curr
        while(curr != null){  // loop until curr is null
            map.get(curr).next = map.get(curr.next);  // update the mp[curr]->next
            map.get(curr).random = map.get(curr.random);  // update the mp[curr]->random
            curr = curr.next;  // update the curr
        }
        return map.get(head);  // return the mp[head]
    }
}

Python:


Python3:


C:


C#:


JavaScript:


Swift:


Dart:
