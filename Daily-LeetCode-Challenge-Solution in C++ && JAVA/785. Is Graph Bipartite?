785. Is Graph Bipartite?



19 May 2023


Medium


C++:


// Time Complexity : O(n) where n is the number of nodes and space complexity is O(n)







class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();  // n is the number of nodes
        vector<int> color(n, -1);  // color is the vector to store the color of each node
        for(int i=0; i<n; i++){  // for each node
            if(color[i] == -1){  // if the color is not assigned
                queue<int> q;  // q is the queue to store the nodes
                q.push(i);  // push the node into the queue
                color[i] = 0;  // assign the color to the node
                while(!q.empty()){  // while the queue is not empty
                    int curr = q.front();  // curr is the front element of the queue
                    q.pop();  // pop the front element of the queue
                    for(auto it: graph[curr]){  // for each adjacent node
                        if(color[it] == -1){  // if the color is not assigned
                            color[it] = 1 - color[curr];  // assign the color to the node
                            q.push(it);  // push the node into the queue
                        }
                        else if(color[it] == color[curr]){  // if the color is same as the adjacent node
                            return false;  // return false
                        }
                    }
                }
            }
        }
        return true;  // return true
    }
};


2nd Method using dfs 



// Time Complexity : O(n) where n is the number of nodes and space complexity is O(n)







class Solution {
public:
    bool dfs(vector<vector<int>>& graph, vector<int>& color, int node){
        for(auto it: graph[node]){  // for each adjacent node
            if(color[it] == -1){  // if the color is not assigned
                color[it] = 1 - color[node];  // assign the color to the node
                if(!dfs(graph, color, it)){  // if the adjacent node is not bipartite
                    return false;  // return false
                }
            }
            else if(color[it] == color[node]){  // if the color is same as the adjacent node
                return false;  // return false
            }
        }
        return true;  // return true
    }
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();  // n is the number of nodes
        vector<int> color(n, -1);  // color is the vector to store the color of each node
        for(int i=0; i<n; i++){  // for each node
            if(color[i] == -1){  // if the color is not assigned
                color[i] = 0;  // assign the color to the node
                if(!dfs(graph, color, i)){  // if the node is not bipartite
                    return false;  // return false
                }
            }
        }
        return true;  // return true
    }
};




Java:
