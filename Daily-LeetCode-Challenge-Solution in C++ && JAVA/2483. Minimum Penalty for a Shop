2483. Minimum Penalty for a Shop


29 Aug 2023


Medium



C++:

// Time Complexity : O(n) and space complexity is O(1)

class Solution {
public:
    int bestClosingTime(string customers) {
        int n=customers.size(); // variable to store the size of the customers
        int currPenality = 0; // variable to store the currPenality
        int minPenality = 0; // variable to store the minPenality
        int earliestHour = 0; // variable to store the earliestHour
        for(int i=0;i<n;i++){ // loop until i is less than n
            if(customers[i]=='N'){ // if customers[i] is equal to 'N'
                currPenality++; // increment the currPenality
            }
            else{ // else
                currPenality--; // decrement the currPenality
            }
            if(currPenality<minPenality){ // if currPenality is less than minPenality
                minPenality=currPenality; // update the minPenality
                earliestHour=i+1; // update the earliestHour
            }
        }
        return earliestHour; // return the earliestHour
    }
};



Java:

// Time Complexity : O(n) and space complexity is O(1)

class Solution {
    public int bestClosingTime(String customers) {
        int n=customers.length(); // variable to store the size of the customers
        int currPenality = 0; // variable to store the currPenality
        int minPenality = 0; // variable to store the minPenality
        int earliestHour = 0; // variable to store the earliestHour
        for(int i=0;i<n;i++){ // loop until i is less than n
            if(customers.charAt(i)=='N'){ // if customers.charAt(i) is equal to 'N'
                currPenality++; // increment the currPenality
            }
            else{ // else
                currPenality--; // decrement the currPenality
            }
            if(currPenality<minPenality){ // if currPenality is less than minPenality
                minPenality=currPenality; // update the minPenality
                earliestHour=i+1; // update the earliestHour
            }
        }
        return earliestHour; // return the earliestHour
    }
}



Python:


// Time Complexity : O(n) and space complexity is O(1)

class Solution(object):
    def bestClosingTime(self, customers): 
        """
        :type customers: str
        :rtype: int
        """
        n=len(customers) # variable to store the size of the customers
        currPenality = 0 # variable to store the currPenality
        minPenality = 0 # variable to store the minPenality
        earliestHour = 0 # variable to store the earliestHour
        for i in range(n): # loop until i is less than n
            if customers[i]=='N': # if customers[i] is equal to 'N'
                currPenality+=1 # increment the currPenality
            else: # else
                currPenality-=1 # decrement the currPenality
            if currPenality<minPenality: # if currPenality is less than minPenality
                minPenality=currPenality # update the minPenality
                earliestHour=i+1 # update the earliestHour
        return earliestHour # return the earliestHour


Python3:

// Time Complexity : O(n) and space complexity is O(1)

class Solution:
    def bestClosingTime(self, customers: str) -> int:
        n=len(customers) # variable to store the size of the customers
        currPenality = 0 # variable to store the currPenality
        minPenality = 0 # variable to store the minPenality
        earliestHour = 0 # variable to store the earliestHour
        for i in range(n): # loop until i is less than n
            if customers[i]=='N': # if customers[i] is equal to 'N'
                currPenality+=1 # increment the currPenality
            else: # else
                currPenality-=1 # decrement the currPenality
            if currPenality<minPenality: # if currPenality is less than minPenality
                minPenality=currPenality # update the minPenality
                earliestHour=i+1 # update the earliestHour
        return earliestHour # return the earliestHour


C:

// Time Complexity : O(n) and space complexity is O(1)

int bestClosingTime(char* customers)
{
    int n=strlen(customers); // variable to store the size of the customers
    int currPenality = 0; // variable to store the currPenality
    int minPenality = 0; // variable to store the minPenality
    int earliestHour = 0; // variable to store the earliestHour
    for(int i=0;i<n;i++){ // loop until i is less than n
        if(customers[i]=='N'){ // if customers[i] is equal to 'N'
            currPenality++; // increment the currPenality
        }
        else{ // else
            currPenality--; // decrement the currPenality
        }
        if(currPenality<minPenality){ // if currPenality is less than minPenality
            minPenality=currPenality; // update the minPenality
            earliestHour=i+1; // update the earliestHour
        }
    }
    return earliestHour; // return the earliestHour
}



C#:


// Time Complexity : O(n) and space complexity is O(1)

public class Solution
{
public
    int BestClosingTime(string customers)
    {
        int n=customers.Length; // variable to store the size of the customers
        int currPenality = 0; // variable to store the currPenality
        int minPenality = 0; // variable to store the minPenality
        int earliestHour = 0; // variable to store the earliestHour
        for(int i=0;i<n;i++){ // loop until i is less than n
            if(customers[i]=='N'){ // if customers[i] is equal to 'N'
                currPenality++; // increment the currPenality
            }
            else{ // else
                currPenality--; // decrement the currPenality
            }
            if(currPenality<minPenality){ // if currPenality is less than minPenality
                minPenality=currPenality; // update the minPenality
                earliestHour=i+1; // update the earliestHour
            }
        }
        return earliestHour; // return the earliestHour
    }
}


JavaScript:


Swift:


Dart:
