2492. Minimum Score of a Path Between Two Cities


22 March 2023


Medium



2 Methods



by using DFS || BFS


C++:

1st Method Using DFS


// Time Complexity : O(n^2) where n is the number of cities and space complexity is O(n^2) where n is the number of cities


class Solution {
public:
    void dfs(int node, vector<vector<pair<int, int>>>& adj, vector<bool>& visit, int& answer) {
        visit[node] = true;
        for (auto& edge : adj[node]) {
            answer = min(answer, edge.second);
            if (!visit[edge.first]) {
                dfs(edge.first, adj, visit, answer);
            }
        }
    }

    int minScore(int n, vector<vector<int>>& roads) {
        vector<vector<pair<int, int>>> adj(n + 1);
        for (auto& road : roads) {
            adj[road[0]].push_back({road[1], road[2]});
            adj[road[1]].push_back({road[0], road[2]});
        }

        vector<bool> visit(n + 1);
        int answer = numeric_limits<int>::max();
        dfs(1, adj, visit, answer);

        return answer;
    }
};


2nd Method BFS

// Time Complexity : O(n^2) where n is the number of cities and space complexity is O(n^2) where n is the number of cities



class Solution {
public:
    int bfs(int& n, vector<vector<pair<int, int>>>& adj) {
        vector<bool> visit(n + 1);
        queue<int> q;
        int answer = numeric_limits<int>::max();

        q.push(1);
        visit[1] = true;

        while (!q.empty()) {
            int node = q.front();
            q.pop();

            for (auto& edge : adj[node]) {
                answer = min(answer, edge.second);
                if (!visit[edge.first]) {
                    visit[edge.first] = true;
                    q.push(edge.first);
                }
            }
        }
        return answer;
    }

    int minScore(int n, vector<vector<int>>& roads) {
        vector<vector<pair<int, int>>> adj(n + 1);
        for (auto& road : roads) {
            adj[road[0]].push_back({road[1], road[2]});
            adj[road[1]].push_back({road[0], road[2]});
        }
        return bfs(n, adj);
    }
};





Java:


1st Method Using DFS


// Time Complexity : O(n^2) where n is the number of cities and space complexity is O(n^2) where n is the number of cities





class Solution {
    int ans = Integer.MAX_VALUE;
    public void dfs(int node , List<List<int[]>> g ,  boolean[] vis){
        vis[node] = true;
        for(int[] edge : g.get(node)){
            ans = Math.min(ans , edge[1]);
            if(!vis[edge[0]]){
                dfs(edge[0] , g , vis);
            }
        }
    }
    public int minScore(int n, int[][] roads) {
        List<List<int[]>> g = new ArrayList<>();
        for(int i=0; i<=n; i++){
            g.add(new ArrayList<>());
        }
        for(int[] road : roads){
            g.get(road[0]).add(new int[]{road[1] , road[2]});
            g.get(road[1]).add(new int[]{road[0] , road[2]});
        }
        boolean[] vis = new boolean[n+1];
        dfs(1 , g , vis);
        return ans;
    }
}


2nd Method BFS



// Time Complexity : O(n^2) where n is the number of cities and space complexity is O(n^2) where n is the number of cities







class Solution {
    int ans = Integer.MAX_VALUE;
    public int bfs(int n , List<List<int[]>> g){
        boolean[] vis = new boolean[n+1];
        Queue<Integer> q = new LinkedList<>();
        q.add(1);
        vis[1] = true;
        while(!q.isEmpty()){
            int node = q.poll();
            for(int[] edge : g.get(node)){
            ans = Math.min(ans , edge[1]);
            if(!vis[edge[0]]){
                vis[edge[0]] = true;
               q.offer(edge[0]);
            }
        }
      
        }
          return ans;
    }
    public int minScore(int n, int[][] roads) {
        List<List<int[]>> g = new ArrayList<>();
        for(int i=0; i<=n; i++){
            g.add(new ArrayList<>());
        }
        for(int[] road : roads){
            g.get(road[0]).add(new int[]{road[1] , road[2]});
            g.get(road[1]).add(new int[]{road[0] , road[2]});
        }
        
        return bfs(n , g);
    }
}


