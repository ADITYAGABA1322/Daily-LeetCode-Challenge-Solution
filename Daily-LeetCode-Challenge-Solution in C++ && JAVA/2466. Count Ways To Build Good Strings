2466. Count Ways To Build Good Strings


13 May 2023



Medium



C++:


// Time Complexity : O(high)  and space complexity is O(high)




class Solution {
public:
    int countGoodStrings(int low, int high, int zero, int one) {
        int ans = 0;
        vector<int> dp(1+high);
        dp[0] = 1;
       

        int mod = 1e9+7;

        for(int end = 1  ; end<= high; end++){
            if(end >= zero){
                dp[end] += dp[end-zero];
            }
            if(end>=one){
                dp[end] += dp[end-one];
            }
            dp[end] %= mod;
        }
        
        for(int i=low; i<=high; i++){
            ans += dp[i];
            ans %= mod;
        }
        return ans;


        
    }
};


        or  

class Solution {
public:
    int countGoodStrings(int low, int high, int zero, int one) {
        vector<int> dp(1+high);
        dp[0]=1;
        int ans = 0 , mod = 1e9+7;
        for(int i=0; i<=high; i++){
            if(i>=zero) dp[i] = (dp[i] + dp[i-zero]) % mod;
            if(i>=one) dp[i] = (dp[i] + dp[i-one]) % mod;
            if (i >= low) ans = (ans +dp[i]) % mod;
        }
        return ans;
    }
};






Java:

// Time Complexity : O(high)  and space complexity is O(high)




class Solution {
    public int countGoodStrings(int low, int high, int zero, int one) {
        int ans = 0;
        int[] dp = new int[1+high];
        dp[0] = 1;
       

        int mod = 1_000_000_007;

        for(int end = 1  ; end<= high; end++){
            if(end >= zero){
                dp[end] += dp[end-zero];
            }
            if(end>=one){
                dp[end] += dp[end-one];
            }
            dp[end] %= mod;
        }
        
        for(int i=low; i<=high; i++){
            ans += dp[i];
            ans %= mod;
        }
        return ans;
        }
    }

}



        or 


 class Solution {
    public int countGoodStrings(int low, int high, int zero, int one) {
        int[] dp = new int[high + 1];
        dp[0] = 1;
        int ans = 0 , mod = 1_000_000_007;;
        for(int i=1; i<=high; i++){
            if(i>=zero) dp[i] = (dp[i] + dp[i-zero]) % mod;
            if(i>=one)  dp[i] = (dp[i] + dp[i-one]) % mod;
            if(i>=low) ans = (ans + dp[i]) % mod;
        }
        return ans;
    }
}    





