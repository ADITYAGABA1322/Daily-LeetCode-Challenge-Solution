837. New 21 Game


25 May 2023



Medium



C++:




// Time Complexity : O(n) where n is the number of cards and space complexity is O(n)



class Solution {
public:
    double new21Game(int N, int K, int W) {  // function to find the probability of winning the game
        if(K == 0 || N >= K+W){  // if the score is 0 or the score is greater than or equal to K+W
            return 1.0;  // return 1
        }
        vector<double> dp(N+1);  // dp vector to store the probabilities
        dp[0] = 1.0;  // initialize the first element of the dp vector to 1
        double Wsum = 1.0;  // Wsum is the variable to store the sum of the probabilities
        for(int i=1; i<=N; i++){  // for each score
            dp[i] = Wsum/W;  // calculate the probability
            if(i < K){  // if the score is less than K
                Wsum += dp[i];  // add the probability to the sum
            }
            if(i-W >= 0){  // if the score is greater than or equal to W
                Wsum -= dp[i-W];  // subtract the probability from the sum
            }
        }
        double ans = 0.0;  // ans is the variable to store the answer
        for(int i=K; i<=N; i++){  // for each score from K to N
            ans += dp[i];  // add the probability to the answer
        }
        return ans;  // return the answer
    }
};


            or 


class Solution {
public:
    double new21Game(int n, int k, int maxPts) {
        vector<double> dp(n+1);
        dp[0] = 1;
        double sum = k >0 ? 1 : 0;
        for(int i=1; i<=n; i++){
            dp[i] = sum/maxPts;
            if(i<k) sum += dp[i];
            if(i-maxPts >= 0 && i-maxPts < k) sum -= dp[i-maxPts];
        }
        
        // double result = 0.0;
        // for (int i = k; i <= n; i++)
        // result += dp[i];
        // return result;
        return accumulate(dp.begin() + k , dp.end() , 0.0);
        
    }
};






Java:




// Time Complexity : O(n) where n is the number of cards and space complexity is O(n)










class Solution {
    public double new21Game(int N, int K, int W) {  // function to find the probability of winning the game
        if(K == 0 || N >= K+W){  // if the score is 0 or the score is greater than or equal to K+W
            return 1.0;  // return 1
        }
        double[] dp = new double[N+1];  // dp vector to store the probabilities
        dp[0] = 1.0;  // initialize the first element of the dp vector to 1
        double Wsum = 1.0;  // Wsum is the variable to store the sum of the probabilities
        for(int i=1; i<=N; i++){  // for each score
            dp[i] = Wsum/W;  // calculate the probability
            if(i < K){  // if the score is less than K
                Wsum += dp[i];  // add the probability to the sum
            }
            if(i-W >= 0){  // if the score is greater than or equal to W
                Wsum -= dp[i-W];  // subtract the probability from the sum
            }
        }
        double ans = 0.0;  // ans is the variable to store the answer
        for(int i=K; i<=N; i++){  // for each score from K to N
            ans += dp[i];  // add the probability to the answer
        }
        return ans;  // return the answer
    }
}




            or


class Solution {
    public double new21Game(int n, int k, int maxPts) {
        double[] dp = new double[n+1];
        dp[0] = 1;
        double sum  = k>0 ? 1 : 0;

        for(int i=1; i<=n; i++){
            dp[i] = sum /maxPts;
            if(i < k) sum += dp[i];
            if(i-maxPts >=0 && i-maxPts < k) sum -= dp[i-maxPts];

        }
        // double result =0.0;
        // for(int i=k; i<=n; i++)
        // result +=dp[i];
        // return result;

        
        return  Arrays.stream(Arrays.copyOfRange(dp, k, dp.length)).sum();
       
                
    }
}









