239. Sliding Window Maximum


16 August 2023


Hard


C++:


// Time Complexity : O(n) where n is the size of the vector nums and space complexity is O(k)

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq; // deque
        vector<int> ans; // vector to store the result
        for(int i=0; i<nums.size(); i++){ // loop for i
            while(!dq.empty() && dq.back() < nums[i]){ // if the deque is not empty and the last element of the deque is less than nums[i]
                dq.pop_back(); // pop the last element from the deque
            }
            dq.push_back(nums[i]); // push the element in the deque
            if(i >= k-1){ // if i is greater than or equal to k-1
                ans.push_back(dq.front()); // push the front element of the deque in the ans
                if(nums[i-k+1] == dq.front()){ // if the front element of the deque is equal to nums[i-k+1]
                    dq.pop_front(); // pop the front element from the deque
                }d
            }
        }
        return ans; // return the ans
    }
};



Java:


Python:


Python3:



C:



C#:



Javascript:



Swift:


Dart:

