54. Spiral Matrix


9 May 2023



Medium



C++:




// Time Complexity : O(m * n) where m is the number of rows and n is the number of columns and space complexity is O(1)



class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> result;  // vector to store the result
        if(matrix.size() == 0){  // if the matrix is empty
            return result;  // return the result
        }
        int m = matrix.size();  // variable to store the number of rows
        int n = matrix[0].size();  // variable to store the number of columns
        int top = 0;  // variable to store the top row
        int bottom = m - 1;  // variable to store the bottom row
        int left = 0;  // variable to store the left column
        int right = n - 1;  // variable to store the right column
        while(top <= bottom && left <= right){  // iterate until the top row is less than or equal to the bottom row and the left column is less than or equal to the right column
            for(int i = left; i <= right; i++){  // iterate through the top row
                result.push_back(matrix[top][i]);  // push the element to the result
            }
            top++;  // increment the top row
            for(int i = top; i <= bottom; i++){  // iterate through the right column
                result.push_back(matrix[i][right]);  // push the element to the result
            }
            right--;  // decrement the right column
            if(top <= bottom){  // if the top row is less than or equal to the bottom row
                for(int i = right; i >= left; i--){  // iterate through the bottom row
                    result.push_back(matrix[bottom][i]);  // push the element to the result
                }
                bottom--;  // decrement the bottom row
            }
            if(left <= right){  // if the left column is less than or equal to the right column
                for(int i = bottom; i >= top; i--){  // iterate through the left column
                    result.push_back(matrix[i][left]);  // push the element to the result
                }
                left++;  // increment the left column
            }
        }
        return result;  // return the result
    }
};

Java:


// Time Complexity : O(m * n) where m is the number of rows and n is the number of columns and space complexity is O(1)



class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> result = new ArrayList<>();  // list to store the result
        if(matrix.length == 0){  // if the matrix is empty
            return result;  // return the result
        }
        int m = matrix.length;  // variable to store the number of rows
        int n = matrix[0].length;  // variable to store the number of columns
        int top = 0;  // variable to store the top row
        int bottom = m - 1;  // variable to store the bottom row
        int left = 0;  // variable to store the left column
        int right = n - 1;  // variable to store the right column
        while(top <= bottom && left <= right){  // iterate until the top row is less than or equal to the bottom row and the left column is less than or equal to the right column
            for(int i = left; i <= right; i++){  // iterate through the top row
                result.add(matrix[top][i]);  // add the element to the result
            }
            top++;  // increment the top row
            for(int i = top; i <= bottom; i++){  // iterate through the right column
                result.add(matrix[i][right]);  // add the element to the result
            }
            right--;  // decrement the right column
            if(top <= bottom){  // if the top row is less than or equal to the bottom row
                for(int i = right; i >= left; i--){  // iterate through the bottom row
                    result.add(matrix[bottom][i]);  // add the element to the result
                }
                bottom--;  // decrement the bottom row
            }
            if(left <= right){  // if the left column is less than or equal to the right column
                for(int i = bottom; i >= top; i--){  // iterate through the left column
                    result.add(matrix[i][left]);  // add the element to the result
                }
                left++;  // increment the left column
            }
        }
        return result;  // return the result
    }
}

