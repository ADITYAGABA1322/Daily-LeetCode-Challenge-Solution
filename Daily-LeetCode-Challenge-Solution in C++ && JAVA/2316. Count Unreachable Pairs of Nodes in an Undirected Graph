2316. Count Unreachable Pairs of Nodes in an Undirected Graph



25 March 2023




Medium



2 Methods Using BFS || DFS




C++:

// Time Complexity : O(n) where n is the number of edges and space complexity is O(n) where n is the number of edges


1st Method DFS 

class Solution {
public:
    int dfs(int node, vector<vector<int>>& adj, vector<bool>& visit) {
        int count = 1;
        visit[node] = true;
        for (int neighbor : adj[node]) {
            if (!visit[neighbor]) {
                count += dfs(neighbor, adj, visit);
            }
        }
        return count;
    }

    long long countPairs(int n, vector<vector<int>>& edges) {
        vector<vector<int>> adj(n);
        for (auto edge : edges) {
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
        }

        long long numberOfPairs = 0;
        long long sizeOfComponent = 0;
        long long remainingNodes = n;
        vector<bool> visit(n);
        for (int i = 0; i < n; i++) {
            if (!visit[i]) {
                sizeOfComponent = dfs(i, adj, visit);
                numberOfPairs += sizeOfComponent * (remainingNodes - sizeOfComponent);
                remainingNodes -= sizeOfComponent;
            }
        }
        return numberOfPairs;
    }
};



2nd Method BFS  

class Solution {
public:
    int bfs(int node, vector<vector<int>>& adj, vector<bool>& visit) {
        queue<int> q;
        q.push(node);
        int count = 1;
        visit[node] = true;

        while (!q.empty()) {
            node = q.front();
            q.pop();
            for (int neighbor : adj[node]) {
                if (!visit[neighbor]) {
                    visit[neighbor] = true;
                    count++;
                    q.push(neighbor);
                }
            }
        }
        return count;
    }

    long long countPairs(int n, vector<vector<int>>& edges) {
        vector<vector<int>> adj(n);
        for (auto edge : edges) {
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
        }

        long long numberOfPairs = 0;
        long long sizeOfComponent = 0;
        long long remainingNodes = n;
        vector<bool> visit(n);
        for (int i = 0; i < n; i++) {
            if (!visit[i]) {
                sizeOfComponent = bfs(i, adj, visit);
                numberOfPairs += sizeOfComponent * (remainingNodes - sizeOfComponent);
                remainingNodes -= sizeOfComponent;
            }
        }
        return numberOfPairs;
    }
};



JAVA:




// Time Complexity : O(n) where n is the number of edges and space complexity is O(n) where n is the number of edges


1st Method DFS 

class Solution {
    public long dfs(int node ,  List<List<Integer>> g ,  boolean[] vis){
        vis[node] = true;
        int count = 1;
        for(int child : g.get(node)){
            if(!vis[child]){
                count += dfs(child , g , vis); 
            }
        }
        return count;
    }
    public long countPairs(int n, int[][] edges) {
        List<List<Integer>> g = new ArrayList<>();
        for(int i=0; i<n; i++){
            g.add(new ArrayList<>());
        }
        for(int[] edge : edges){
            g.get(edge[0]).add(edge[1]);
            g.get(edge[1]).add(edge[0]);
        }
        long numberofPairs = 0;
        long remainingComponents = n;
        long sizeofComponents = 0;
        boolean[] vis = new boolean[n];
        for(int i=0; i<n; i++){
            if(!vis[i]){
                sizeofComponents = dfs(i , g , vis);
                numberofPairs += sizeofComponents * (remainingComponents - sizeofComponents);
                remainingComponents -= sizeofComponents;
            }
        }
        return numberofPairs;
    }
}



2nd Method BFS  


class Solution {
    public long bfs(int node ,  List<List<Integer>> g ,  boolean[] vis){
        Queue<Integer> q = new LinkedList<>();
        q.add(node);
        vis[node] = true;
        int count = 1;
        while(!q.isEmpty()){
             node = q.poll();
            for(int child : g.get(node)){
            if(!vis[child]){
               vis[child] = true;
               count++;
               q.add(child);
            }
        }
         
        }
           return count;
        
    }
    public long countPairs(int n, int[][] edges) {
        List<List<Integer>> g = new ArrayList<>();
        for(int i=0; i<n; i++){
            g.add(new ArrayList<>());
        }
        for(int[] edge : edges){
            g.get(edge[0]).add(edge[1]);
            g.get(edge[1]).add(edge[0]);
        }
        long numberofPairs = 0;
        long remainingComponents = n;
        long sizeofComponents = 0;
        boolean[] vis = new boolean[n];
        for(int i=0; i<n; i++){
            if(!vis[i]){
                sizeofComponents = bfs(i , g , vis);
                numberofPairs += sizeofComponents * (remainingComponents - sizeofComponents);
                remainingComponents -= sizeofComponents;
            }
        }
        return numberofPairs;
    }
}


