456. 132 Pattern


30 Sept 2023


Medium



C++:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(n)

class Solution {
public:
    bool find132pattern(vector<int>& nums) {
        int n = nums.size();  // variable to store the n
        stack<int>st;  // stack to store the st
        int s3 = INT_MIN;  // variable to store the s3
        for(int i=n-1; i>=0; i--){  // loop until i is greater than or equal to 0
            if(nums[i]<s3)return true;  // if nums[i] is less than s3 return true
            else{  // else
                while(!st.empty() && nums[i]>st.top()){  // loop until st is not empty and nums[i] is greater than st.top()
                    s3 = st.top();  // update the s3
                    st.pop();  // pop the st
                }
            }
            st.push(nums[i]);  // push the nums[i]
        }
        return false;  // return false
    }

};

Java:


// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(n)

class Solution {
    public boolean find132pattern(int[] nums) {
        int n = nums.length;  // variable to store the n
        Stack<Integer>st = new Stack<>();  // stack to store the st
        int s3 = Integer.MIN_VALUE;  // variable to store the s3
        for(int i=n-1; i>=0; i--){  // loop until i is greater than or equal to 0
            if(nums[i]<s3)return true;  // if nums[i] is less than s3 return true
            else{  // else
                while(!st.empty() && nums[i]>st.peek()){  // loop until st is not empty and nums[i] is greater than st.top()
                    s3 = st.peek();  // update the s3
                    st.pop();  // pop the st
                }
            }
            st.push(nums[i]);  // push the nums[i]
        }
        return false;  // return false
    }
}



Python:


// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(n)

class Solution(object):
    def find132pattern(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        n = len(nums)  # variable to store the n
        st = []  # stack to store the st
        s3 = float('-inf')  # variable to store the s3
        for i in range(n-1, -1, -1):  # loop until i is greater than or equal to 0
            if nums[i]<s3: return True  # if nums[i] is less than s3 return true
            else:  # else
                while st and nums[i]>st[-1]:  # loop until st is not empty and nums[i] is greater than st.top()
                    s3 = st[-1]  # update the s3
                    st.pop()  # pop the st
            st.append(nums[i])  # push the nums[i]
        return False  # return false


Python3:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(n)

class Solution:
    def find132pattern(self, nums: List[int) -> bool: // add the missing bracket after int
        n = len(nums)  # variable to store the n
        st = []  # stack to store the st
        s3 = float('-inf')  # variable to store the s3
        for i in range(n-1, -1, -1):  # loop until i is greater than or equal to 0
            if nums[i]<s3: return True  # if nums[i] is less than s3 return true
            else:  # else
                while st and nums[i]>st[-1]:  # loop until st is not empty and nums[i] is greater than st.top()
                    s3 = st[-1]  # update the s3
                    st.pop()  # pop the st
            st.append(nums[i])  # push the nums[i]
        return False  # return false


C:



C#:


JavaScript:


Swift:


Dart:
