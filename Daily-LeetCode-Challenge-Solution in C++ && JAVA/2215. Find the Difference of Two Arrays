2215. Find the Difference of Two Arrays


3 May 2023

 

Easy



C++:



// Time complexity: O(N+M) and Space complexity: O(max(N,M))




class Solution {
public:
    vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) {
    unordered_set<int> s1(nums1.begin(), nums1.end());
     unordered_set<int> s2(nums2.begin(), nums2.end());
        vector<int> ans1;
        vector<int> ans2;

        for(int num : s1){
            if(s2.count(num) == 0){
                ans1.push_back(num);
            }

        }
        for(int num : s2){
            if(s1.count(num) == 0){
                ans2.push_back(num);
            }
        }
        return {ans1 , ans2};
    }
};


2nd Method 



class Solution {
public:
    vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) {
        vector<int> v1 , v2;
         set<int> s1(begin(nums1), end(nums1)), s2(begin(nums2), end(nums2));
        set_difference(begin(s1) , end(s1) ,begin(s2) , end(s2) , back_inserter(v1));
        set_difference(begin(s2) , end(s2) , begin(s1) ,end(s1) , back_inserter(v2));
         return {v1 , v2};
    }
   
    
};





Java:





// Time complexity: O(N+M) and Space complexity: O(max(N,M))






import java.util.*;

class Solution {
    public List<List<Integer>> findDifference(int[] nums1, int[] nums2) {
        Set<Integer> s1 = new HashSet<>();
        Set<Integer> s2 = new HashSet<>();

        for (int num : nums1) {
            s1.add(num);
        }

        for (int num : nums2) {
            s2.add(num);
        }

        List<Integer> ans1 = new ArrayList<>();
        List<Integer> ans2 = new ArrayList<>();

        for (int num : s1) {
            if (!s2.contains(num)) {
                ans1.add(num);
            }
        }

        for (int num : s2) {
            if (!s1.contains(num)) {
                ans2.add(num);
            }
        }

        List<List<Integer>> result = new ArrayList<>();
        result.add(ans1);
        result.add(ans2);
        return result;
    }
}






