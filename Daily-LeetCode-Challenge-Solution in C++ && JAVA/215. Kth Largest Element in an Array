215. Kth Largest Element in an Array


14 Aug 2023


Medium

2 Methods : By Using Min Heap && By Using QuickSelect ||  Hoare's selection algorithm

C++:

// Time Complexity : O(nlogk) where n is the size of the vector nums and space complexity is O(k)

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int, vector<int>, greater<int>> pq; // min heap
        for(int i=0; i<nums.size(); i++){ // loop for i
            pq.push(nums[i]); // push the element in the min heap
            if(pq.size() > k){ // if the size of the min heap is greater than k
                pq.pop(); // pop the element from the min heap
            }
        }
        return pq.top(); // return the top element from the min heap
    }
};

2nd Method using  quick select (Quickselect, also known as Hoare's selection algorithm, is a selection algorithm to find the kth smallest/largest element in an unordered list. It is related to the quick sort sorting algorithm.)

// Time Complexity : O(n) where n is the size of the vector nums and space complexity is O(1)

class Solution {
public:
      int findKthLargest(vector<int>& nums, int k) {
        return quickSelect(nums , k); // call the quickSelect function
    }

    int quickSelect(vector<int>& nums , int k){ // function to find the kth largest element
        int pivot = nums[rand() % nums.size()]; // variable to store the pivot
        vector<int> left; // vector to store the left
        vector<int> mid; // vector to store the mid
        vector<int> right; // vector to store the right
        for(int num : nums) { // loop for num
            if (num > pivot) { // if num is greater than pivot
                left.push_back(num); // push the num in the left
            } else if (num == pivot) { // else if num is equal to pivot
                mid.push_back(num); // push the num in the mid
            } else { // else
                right.push_back(num); // push the num in the right
            }
        }
       if(k<=left.size()){ // if k is less than or equal to left.size()
           return quickSelect(left , k); // call the quickSelect function
       }
       if(k>left.size()+mid.size()){ // if k is greater than left.size()+mid.size()
           return quickSelect(right , k-left.size()-mid.size()); // call the quickSelect function
       }
       return pivot; // return the pivot
    }

};


Java:

// Time Complexity : O(nlogk) where n is the size of the vector nums and space complexity is O(k)

class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>(); // min heap
        for(int i=0; i<nums.length; i++){ // loop for i
            pq.add(nums[i]); // push the element in the min heap
            if(pq.size() > k){ // if the size of the min heap is greater than k
                pq.poll(); // pop the element from the min heap
            }
        }
        return pq.peek(); // return the top element from the min heap
    }
}

2nd Method using  quick select (Quickselect, also known as Hoare's selection algorithm, is a selection algorithm to find the kth smallest/largest element in an unordered list. It is related to the quick sort sorting algorithm.)

// Time Complexity : O(n) where n is the size of the vector nums and space complexity is O(1)

class Solution {
    public int findKthLargest(int[] nums, int k) {
        return quickSelect(nums , k); // call the quickSelect function
    }

    public int quickSelect(int[] nums , int k){ // function to find the kth largest element
        int pivot = nums[new Random().nextInt(nums.length)]; // variable to store the pivot
        List<Integer> left = new ArrayList<>(); // vector to store the left
        List<Integer> mid = new ArrayList<>(); // vector to store the mid
        List<Integer> right = new ArrayList<>(); // vector to store the right
        for(int num : nums) { // loop for num
            if (num > pivot) { // if num is greater than pivot
                left.add(num); // push the num in the left
            } else if (num == pivot) { // else if num is equal to pivot
                mid.add(num); // push the num in the mid
            } else { // else
                right.add(num); // push the num in the right
            }
        }
       if(k<=left.size()){ // if k is less than or equal to left.size()
           return quickSelect(left.stream().mapToInt(i -> i).toArray() , k); // call the quickSelect function
       }
       if(k>left.size()+mid.size()){ // if k is greater than left.size()+mid.size()
           return quickSelect(right.stream().mapToInt(i -> i).toArray() , k-left.size()-mid.size()); // call the quickSelect function
       }
       return pivot; // return the pivot
    }

}


Python:

// Time Complexity : O(nlogk) where n is the size of the vector nums and space complexity is O(k)

class Solution(object):
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        pq = []  # min heap
        for i in range(len(nums)):  # loop for i
            heapq.heappush(pq, nums[i])  # push the element in the min heap
            if len(pq) > k:  # if the size of the min heap is greater than k
                heapq.heappop(pq)  # pop the element from the min heap
        return pq[0]  # return the top element from the min heap

2nd Method using  quick select (Quickselect, also known as Hoare's selection algorithm, is a selection algorithm to find the kth smallest/largest element in an unordered list. It is related to the quick sort sorting algorithm.)

// Time Complexity : O(n) where n is the size of the vector nums and space complexity is O(1)

class Solution(object):
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        return self.quickSelect(nums, k)  # call the quickSelect function

    def quickSelect(self, nums, k):  # function to find the kth largest element
        pivot = random.choice(nums)  # variable to store the pivot
        left = []  # vector to store the left
        mid = []  # vector to store the mid
        right = []  # vector to store the right
        for num in nums:  # loop for num
            if num > pivot:  # if num is greater than pivot
                left.append(num)  # push the num in the left
            elif num == pivot:  # else if num is equal to pivot
                mid.append(num)  # push the num in the mid
            else:  # else
                right.append(num)  # push the num in the right
        if k <= len(left):  # if k is less than or equal to left.size()
            return self.quickSelect(left, k)  # call the quickSelect function
        if k > len(left) + len(mid):  # if k is greater than left.size()+mid.size()
            return self.quickSelect(right, k - len(left) - len(mid))  # call the quickSelect function
        return pivot  # return the pivot

Python3:

// Time Complexity : O(nlogk) where n is the size of the vector nums and space complexity is O(k)

class Solution:
    def findKthLargest(self, nums: List[int, k: int) -> int:  // add the missing bracket after int
        pq = []  # min heap
        for i in range(len(nums)):  # loop for i
            heapq.heappush(pq, nums[i])  # push the element in the min heap
            if len(pq) > k:  # if the size of the min heap is greater than k
                heapq.heappop(pq)  # pop the element from the min heap
        return pq[0]  # return the top element from the min heap 

2nd Method using  quick select (Quickselect, also known as Hoare's selection algorithm, is a selection algorithm to find the kth smallest/largest element in an unordered list. It is related to the quick sort sorting algorithm.)

// Time Complexity : O(n) where n is the size of the vector nums and space complexity is O(1)

class Solution:
    def findKthLargest(self, nums: List[int, k: int) -> int:  // add the missing bracket after int
        return self.quickSelect(nums, k)  # call the quickSelect function

    def quickSelect(self, nums, k):  # function to find the kth largest element
        pivot = random.choice(nums)  # variable to store the pivot
        left = []  # vector to store the left
        mid = []  # vector to store the mid
        right = []  # vector to store the right
        for num in nums:  # loop for num
            if num > pivot:  # if num is greater than pivot
                left.append(num)  # push the num in the left
            elif num == pivot:  # else if num is equal to pivot
                mid.append(num)  # push the num in the mid
            else:  # else
                right.append(num)  # push the num in the right
        if k <= len(left):  # if k is less than or equal to left.size()
            return self.quickSelect(left, k)  # call the quickSelect function
        if k > len(left) + len(mid):  # if k is greater than left.size()+mid.size()
            return self.quickSelect(right, k - len(left) - len(mid))  # call the quickSelect function
        return pivot  # return the pivot


C:

int findKthLargest(int* nums, int numsSize, int k){
    int pq[numsSize];  // min heap
    int size = 0;  // variable to store the size of the min heap
    for(int i=0; i<numsSize; i++){  // loop for i
        pq[size++] = nums[i];  // push the element in the min heap
        if(size > k){  // if the size of the min heap is greater than k
            heapify(pq, size);  // heapify the min heap
            pq[0] = pq[size-1];  // update the pq[0]
            size--;  // decrement the size
        }
    }
    heapify(pq, size);  // heapify the min heap
    return pq[0];  // return the top element from the min heap
}

void heapify(int* pq, int size){  // function to heapify the min heap
    for(int i=size/2-1; i>=0; i--){  // loop for i
        int smallest = i;  // variable to store the smallest
        int left = 2*i+1;  // variable to store the left
        int right = 2*i+2;  // variable to store the right
        if(left<size && pq[left]<pq[smallest]){  // if left is less than size and pq[left] is less than pq[smallest]
            smallest = left;  // update the smallest
        }
        if(right<size && pq[right]<pq[smallest]){  // if right is less than size and pq[right] is less than pq[smallest]
            smallest = right;  // update the smallest
        }
        if(smallest != i){  // if smallest is not equal to i
            int temp = pq[i];  // variable to store the pq[i]
            pq[i] = pq[smallest];  // update the pq[i]
            pq[smallest] = temp;  // update the pq[smallest]
            heapify(pq, size);  // heapify the min heap
        }
    }
}



C#:


JavaScript:


Swift:


Dart:


