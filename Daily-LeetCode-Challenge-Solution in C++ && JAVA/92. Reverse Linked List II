92. Reverse Linked List II


7 Sept 2023


Medium


C++:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(1)

class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        ListNode* dummy = new ListNode(0);  // variable to store the dummy
        dummy->next = head;  // update the dummy->next
        ListNode* prev = dummy;  // variable to store the prev
        for(int i=0; i<left-1; i++){  // loop until i is less than left-1
            prev = prev->next;  // update the prev
        }
        ListNode* curr = prev->next;  // variable to store the curr
        for(int i=0; i<right-left; i++){  // loop until i is less than right-left
            ListNode* temp = prev->next;  // variable to store the temp
            prev->next = curr->next;  // update the prev->next
            curr->next = curr->next->next;  // update the curr->next
            prev->next->next = temp;  // update the prev->next->next
        }
        return dummy->next;  // return the dummy->next
    }
};


Java:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(1)

class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        ListNode dummy = new ListNode(0);  // variable to store the dummy
        dummy.next = head;  // update the dummy->next
        ListNode prev = dummy;  // variable to store the prev
        for(int i=0; i<left-1; i++){  // loop until i is less than left-1
            prev = prev.next;  // update the prev
        }
        ListNode curr = prev.next;  // variable to store the curr
        for(int i=0; i<right-left; i++){  // loop until i is less than right-left
            ListNode temp = prev.next;  // variable to store the temp
            prev.next = curr.next;  // update the prev->next
            curr.next = curr.next.next;  // update the curr->next
            prev.next.next = temp;  // update the prev->next->next
        }
        return dummy.next;  // return the dummy->next
    }
}


Python:


Python3:


C:


C#:



JavaScript:

Swift:

Dart:
