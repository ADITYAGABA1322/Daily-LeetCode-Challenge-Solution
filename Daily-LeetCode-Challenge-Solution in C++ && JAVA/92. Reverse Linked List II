92. Reverse Linked List II


7 Sept 2023


Medium


C++:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(1)

class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        ListNode* dummy = new ListNode(0);  // variable to store the dummy
        dummy->next = head;  // update the dummy->next
        ListNode* prev = dummy;  // variable to store the prev
        for(int i=0; i<left-1; i++){  // loop until i is less than left-1
            prev = prev->next;  // update the prev
        }
        ListNode* curr = prev->next;  // variable to store the curr
        for(int i=0; i<right-left; i++){  // loop until i is less than right-left
            ListNode* temp = prev->next;  // variable to store the temp
            prev->next = curr->next;  // update the prev->next
            curr->next = curr->next->next;  // update the curr->next
            prev->next->next = temp;  // update the prev->next->next
        }
        return dummy->next;  // return the dummy->next
    }
};


Java:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(1)

class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        ListNode dummy = new ListNode(0);  // variable to store the dummy
        dummy.next = head;  // update the dummy->next
        ListNode prev = dummy;  // variable to store the prev
        for(int i=0; i<left-1; i++){  // loop until i is less than left-1
            prev = prev.next;  // update the prev
        }
        ListNode curr = prev.next;  // variable to store the curr
        for(int i=0; i<right-left; i++){  // loop until i is less than right-left
            ListNode temp = prev.next;  // variable to store the temp
            prev.next = curr.next;  // update the prev->next
            curr.next = curr.next.next;  // update the curr->next
            prev.next.next = temp;  // update the prev->next->next
        }
        return dummy.next;  // return the dummy->next
    }
}


Python:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(1)

class Solution(object):
    def reverseBetween(self, head, left, right):
        """
        :type head: ListNode
        :type left: int
        :type right: int
        :rtype: ListNode
        """
        
        dummy = ListNode(0)  # variable to store the dummy
        dummy.next = head  # update the dummy->next
        prev = dummy  # variable to store the prev
        for i in range(left-1):  # loop until i is less than left-1
            prev = prev.next  # update the prev
        curr = prev.next  # variable to store the curr
        for i in range(right-left):  # loop until i is less than right-left
            temp = prev.next  # variable to store the temp
            prev.next = curr.next  # update the prev->next
            curr.next = curr.next.next  # update the curr->next
            prev.next.next = temp  # update the prev->next->next
        return dummy.next  # return the dummy->next


Python3:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(1)

class Solution:
    def reverseBetween(self, head: ListNode, left: int, right: int) -> ListNode:
        dummy = ListNode(0)  # variable to store the dummy
        dummy.next = head  # update the dummy->next
        prev = dummy  # variable to store the prev
        for i in range(left-1):  # loop until i is less than left-1
            prev = prev.next  # update the prev
        curr = prev.next  # variable to store the curr
        for i in range(right-left):  # loop until i is less than right-left
            temp = prev.next  # variable to store the temp
            prev.next = curr.next  # update the prev->next
            curr.next = curr.next.next  # update the curr->next
            prev.next.next = temp  # update the prev->next->next
        return dummy.next  # return the dummy->next


C:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(1)

struct ListNode* reverseBetween(struct ListNode* head, int left, int right){
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));  // variable to store the dummy
    dummy->next = head;  // update the dummy->next
    struct ListNode* prev = dummy;  // variable to store the prev
    for(int i=0; i<left-1; i++){  // loop until i is less than left-1
        prev = prev->next;  // update the prev
    }
    struct ListNode* curr = prev->next;  // variable to store the curr
    for(int i=0; i<right-left; i++){  // loop until i is less than right-left
        struct ListNode* temp = prev->next;  // variable to store the temp
        prev->next = curr->next;  // update the prev->next
        curr->next = curr->next->next;  // update the curr->next
        prev->next->next = temp;  // update the prev->next->next
    }
    return dummy->next;  // return the dummy->next
}


C#:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(1)

public class Solution {
    public ListNode ReverseBetween(ListNode head, int left, int right) {
        ListNode dummy = new ListNode(0);  // variable to store the dummy
        dummy.next = head;  // update the dummy->next
        ListNode prev = dummy;  // variable to store the prev
        for(int i=0; i<left-1; i++){  // loop until i is less than left-1
            prev = prev.next;  // update the prev
        }
        ListNode curr = prev.next;  // variable to store the curr
        for(int i=0; i<right-left; i++){  // loop until i is less than right-left
            ListNode temp = prev.next;  // variable to store the temp
            prev.next = curr.next;  // update the prev->next
            curr.next = curr.next.next;  // update the curr->next
            prev.next.next = temp;  // update the prev->next->next
        }
        return dummy.next;  // return the dummy->next
    }
}



JavaScript:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(1)

var reverseBetween = function(head, left, right) {
    let dummy = new ListNode(0);  // variable to store the dummy
    dummy.next = head;  // update the dummy->next
    let prev = dummy;  // variable to store the prev
    for(let i=0; i<left-1; i++){  // loop until i is less than left-1
        prev = prev.next;  // update the prev
    }
    let curr = prev.next;  // variable to store the curr
    for(let i=0; i<right-left; i++){  // loop until i is less than right-left
        let temp = prev.next;  // variable to store the temp
        prev.next = curr.next;  // update the prev->next
        curr.next = curr.next.next;  // update the curr->next
        prev.next.next = temp;  // update the prev->next->next
    }
    return dummy.next;  // return the dummy->next
};

Swift:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(1)

class Solution {
    func reverseBetween(_ head: ListNode?, _ left: Int, _ right: Int) -> ListNode? {
        let dummy = ListNode(0);  // variable to store the dummy
        dummy.next = head;  // update the dummy->next
        var prev = dummy;  // variable to store the prev
        for i in 0..<left-1{  // loop until i is less than left-1
            prev = prev.next!;  // update the prev
        }
        var curr = prev.next;  // variable to store the curr
        for i in 0..<right-left{  // loop until i is less than right-left
            let temp = prev.next;  // variable to store the temp
            prev.next = curr?.next;  // update the prev->next
            curr?.next = curr?.next?.next;  // update the curr->next
            prev.next?.next = temp;  // update the prev->next->next
        }
        return dummy.next;  // return the dummy->next
    }
}

Dart:

// Time Complexity : O(n) where n is the length of the vector nums and space complexity is O(1)

class Solution {
  ListNode? reverseBetween(ListNode? head, int left, int right) {
    ListNode? dummy = ListNode(0);  // variable to store the dummy
    dummy.next = head;  // update the dummy->next
    ListNode? prev = dummy;  // variable to store the prev
    for (int i = 0; i < left - 1; i++) {  // loop until i is less than left-1
      prev = prev!.next;  // update the prev
    }
    ListNode? curr = prev!.next;  // variable to store the curr
    for (int i = 0; i < right - left; i++) {  // loop until i is less than right-left
      ListNode? temp = prev!.next;  // variable to store the temp
      prev!.next = curr!.next;  // update the prev->next
      curr!.next = curr!.next!.next;  // update the curr->next
      prev!.next!.next = temp;  // update the prev->next->next
    }
    return dummy!.next;  // return the dummy->next
  }
}
