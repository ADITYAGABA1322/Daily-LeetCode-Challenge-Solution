605. Can Place Flowers


20 March 2023



Easy



C++:


// Time Complexity : O(n) where n is the length of the array and space complexity is O(1)





class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        int count = 0;  // variable to store the count
        int m = flowerbed.size();  // get the size of the array
        for(int i = 0; i < m; i++){  // iterate through the array
            if(flowerbed[i] == 0 && (i == 0 || flowerbed[i - 1] == 0) && (i == m - 1 || flowerbed[i + 1] == 0)){  // if the current element is 0 and the previous and next element is 0
                flowerbed[i] = 1;  // update the current element
                count++;  // increment the count
            }
        }
        return count >= n;  // return the result
    }
};






Java:





// Time Complexity : O(n) where n is the length of the array and space complexity is O(1)





class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int count = 0;  // variable to store the count
        int m = flowerbed.length;  // get the size of the array
        for(int i = 0; i < m; i++){  // iterate through the array
            if(flowerbed[i] == 0 && (i == 0 || flowerbed[i - 1] == 0) && (i == m - 1 || flowerbed[i + 1] == 0)){  // if the current element is 0 and the previous and next element is 0
                flowerbed[i] = 1;  // update the current element
                count++;  // increment the count
            }
        }
        return count >= n;  // return the result
    }
}


